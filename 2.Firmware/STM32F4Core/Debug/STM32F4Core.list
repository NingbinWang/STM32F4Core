
STM32F4Core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009728  08009728  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08009728  08009728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009730  08009730  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009730  08009730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08009738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000120  08009858  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d04  08009858  00024d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c86  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b90  00000000  00000000  00040dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  00045968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a70  00000000  00000000  000475c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4c2  00000000  00000000  00049038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024feb  00000000  00000000  000654fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8df  00000000  00000000  0008a4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128dc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076bc  00000000  00000000  00128e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009680 	.word	0x08009680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	08009680 	.word	0x08009680

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000140 	.word	0x20000140
 8000514:	20000194 	.word	0x20000194

08000518 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_FREERTOS_Init+0x30>)
 8000520:	1d3c      	adds	r4, r7, #4
 8000522:	461d      	mov	r5, r3
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f007 fa1d 	bl	8007974 <osThreadCreate>
 800053a:	4603      	mov	r3, r0
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <MX_FREERTOS_Init+0x34>)
 800053e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bdb0      	pop	{r4, r5, r7, pc}
 8000548:	080096a4 	.word	0x080096a4
 800054c:	2000013c 	.word	0x2000013c

08000550 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000558:	f008 fc38 	bl	8008dcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f007 fa55 	bl	8007a0c <osDelay>
 8000562:	e7fb      	b.n	800055c <StartDefaultTask+0xc>

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_GPIO_Init+0x68>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <MX_GPIO_Init+0x68>)
 8000574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_GPIO_Init+0x68>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_GPIO_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <MX_GPIO_Init+0x68>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_GPIO_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_GPIO_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <MX_GPIO_Init+0x68>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_GPIO_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_I2C1_Init+0x50>)
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <MX_I2C1_Init+0x54>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_I2C1_Init+0x50>)
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_I2C1_Init+0x58>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_I2C1_Init+0x50>)
 80005ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_I2C1_Init+0x50>)
 800060e:	f000 ff3b 	bl	8001488 <HAL_I2C_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 f956 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000394 	.word	0x20000394
 8000624:	40005400 	.word	0x40005400
 8000628:	000186a0 	.word	0x000186a0

0800062c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C2_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C2_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C2_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C2_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C2_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C2_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C2_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C2_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C2_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C2_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C2_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C2_Init+0x50>)
 800066a:	f000 ff0d 	bl	8001488 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f928 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200003e8 	.word	0x200003e8
 8000680:	40005800 	.word	0x40005800
 8000684:	000186a0 	.word	0x000186a0

08000688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a3a      	ldr	r2, [pc, #232]	; (8000790 <HAL_I2C_MspInit+0x108>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d12c      	bne.n	8000704 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	4b39      	ldr	r3, [pc, #228]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a38      	ldr	r2, [pc, #224]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b36      	ldr	r3, [pc, #216]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ca:	2312      	movs	r3, #18
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	482d      	ldr	r0, [pc, #180]	; (8000798 <HAL_I2C_MspInit+0x110>)
 80006e2:	f000 fd4d 	bl	8001180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	4a29      	ldr	r2, [pc, #164]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f4:	6413      	str	r3, [r2, #64]	; 0x40
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000702:	e041      	b.n	8000788 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <HAL_I2C_MspInit+0x114>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d13c      	bne.n	8000788 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800072a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800073c:	2304      	movs	r3, #4
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <HAL_I2C_MspInit+0x110>)
 8000748:	f000 fd1a 	bl	8001180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800074c:	2308      	movs	r3, #8
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000750:	2312      	movs	r3, #18
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800075c:	2309      	movs	r3, #9
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <HAL_I2C_MspInit+0x110>)
 8000768:	f000 fd0a 	bl	8001180 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 8000776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_I2C_MspInit+0x10c>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	bf00      	nop
 800078a:	3730      	adds	r7, #48	; 0x30
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40005400 	.word	0x40005400
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400
 800079c:	40005800 	.word	0x40005800

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fba4 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f814 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f7ff feda 	bl	8000564 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b0:	f7ff ff0e 	bl	80005d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007b4:	f000 faa2 	bl	8000cfc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80007b8:	f7ff ff38 	bl	800062c <MX_I2C2_Init>
  MX_SPI1_Init();
 80007bc:	f000 f88a 	bl	80008d4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80007c0:	f000 f9c6 	bl	8000b50 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007c4:	f000 fac4 	bl	8000d50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007c8:	f7ff fea6 	bl	8000518 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007cc:	f007 f8cb 	bl	8007966 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x30>
	...

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f008 ff44 	bl	8009670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b27      	ldr	r3, [pc, #156]	; (800089c <SystemClock_Config+0xc8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <SystemClock_Config+0xc8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <SystemClock_Config+0xc8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <SystemClock_Config+0xcc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <SystemClock_Config+0xcc>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <SystemClock_Config+0xcc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000844:	2319      	movs	r3, #25
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000848:	2390      	movs	r3, #144	; 0x90
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000850:	2303      	movs	r3, #3
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f9bf 	bl	8002bdc <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 f830 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2302      	movs	r3, #2
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2102      	movs	r1, #2
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fc21 	bl	80030cc <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000890:	f000 f81a 	bl	80008c8 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3750      	adds	r7, #80	; 0x50
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 fb3d 	bl	8000f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010000 	.word	0x40010000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_SPI1_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_SPI1_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_SPI1_Init+0x64>)
 8000920:	220a      	movs	r2, #10
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_SPI1_Init+0x64>)
 8000926:	f002 fde3 	bl	80034f0 <HAL_SPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000930:	f7ff ffca 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000043c 	.word	0x2000043c
 800093c:	40013000 	.word	0x40013000

08000940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_SPI_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_SPI_MspInit+0x88>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <HAL_SPI_MspInit+0x88>)
 800096c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_SPI_MspInit+0x88>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_SPI_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_SPI_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_SPI_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800099a:	23e0      	movs	r3, #224	; 0xe0
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009aa:	2305      	movs	r3, #5
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_SPI_MspInit+0x8c>)
 80009b6:	f000 fbe3 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40013000 	.word	0x40013000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_MspInit+0x54>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <HAL_MspInit+0x54>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x54>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_MspInit+0x54>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_MspInit+0x54>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_MspInit+0x54>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	210f      	movs	r1, #15
 8000a12:	f06f 0001 	mvn.w	r0, #1
 8000a16:	f000 fb89 	bl	800112c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2019      	movs	r0, #25
 8000a3e:	f000 fb75 	bl	800112c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a42:	2019      	movs	r0, #25
 8000a44:	f000 fb8e 	bl	8001164 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_InitTick+0xa0>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <HAL_InitTick+0xa0>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6453      	str	r3, [r2, #68]	; 0x44
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_InitTick+0xa0>)
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fd0c 	bl	800348c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a74:	f002 fcf6 	bl	8003464 <HAL_RCC_GetPCLK2Freq>
 8000a78:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_InitTick+0xa4>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9b      	lsrs	r3, r3, #18
 8000a84:	3b01      	subs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_InitTick+0xac>)
 8000a8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000a90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000aaa:	f002 fdaa 	bl	8003602 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d104      	bne.n	8000abe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000ab6:	f002 fdfd 	bl	80036b4 <HAL_TIM_Base_Start_IT>
 8000aba:	4603      	mov	r3, r0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	431bde83 	.word	0x431bde83
 8000ad0:	20000494 	.word	0x20000494
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b0a:	f002 fe84 	bl	8003816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000494 	.word	0x20000494

08000b18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <OTG_FS_IRQHandler+0x10>)
 8000b1e:	f000 ff47 	bl	80019b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200047e4 	.word	0x200047e4

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	f107 0320 	add.w	r3, r7, #32
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b72:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b74:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <MX_TIM3_Init+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b98:	4828      	ldr	r0, [pc, #160]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b9a:	f002 fded 	bl	8003778 <HAL_TIM_PWM_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f7ff fe90 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000bb8:	f003 fa2c 	bl	8004014 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000bc2:	f7ff fe81 	bl	80008c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000bde:	f002 ff23 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000be8:	f7ff fe6e 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000bf4:	f002 ff18 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bfe:	f7ff fe63 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2208      	movs	r2, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000c0a:	f002 ff0d 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000c14:	f7ff fe58 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000c20:	f002 ff02 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000c2a:	f7ff fe4d 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000c30:	f000 f82a 	bl	8000c88 <HAL_TIM_MspPostInit>

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200004dc 	.word	0x200004dc
 8000c40:	40000400 	.word	0x40000400

08000c44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10d      	bne.n	8000c72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_TIM_PWM_MspInit+0x40>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_TIM_PWM_MspInit+0x40>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_TIM_PWM_MspInit+0x40>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40000400 	.word	0x40000400
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_TIM_MspPostInit+0x68>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d11d      	bne.n	8000ce6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_TIM_MspPostInit+0x6c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_TIM_MspPostInit+0x6c>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_TIM_MspPostInit+0x6c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cc6:	2333      	movs	r3, #51	; 0x33
 8000cc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_TIM_MspPostInit+0x70>)
 8000ce2:	f000 fa4d 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40000400 	.word	0x40000400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020400 	.word	0x40020400

08000cfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_USART1_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f003 f9f0 	bl	8004118 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f7ff fdc3 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000524 	.word	0x20000524
 8000d4c:	40011000 	.word	0x40011000

08000d50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART2_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d88:	f003 f9c6 	bl	8004118 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f7ff fd99 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000568 	.word	0x20000568
 8000da0:	40004400 	.word	0x40004400

08000da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a32      	ldr	r2, [pc, #200]	; (8000e8c <HAL_UART_MspInit+0xe8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12d      	bne.n	8000e22 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000dfe:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e10:	2307      	movs	r3, #7
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481e      	ldr	r0, [pc, #120]	; (8000e94 <HAL_UART_MspInit+0xf0>)
 8000e1c:	f000 f9b0 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e20:	e030      	b.n	8000e84 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <HAL_UART_MspInit+0xf4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d12b      	bne.n	8000e84 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_UART_MspInit+0xec>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e64:	230c      	movs	r3, #12
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e74:	2307      	movs	r3, #7
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_UART_MspInit+0xf0>)
 8000e80:	f000 f97e 	bl	8001180 <HAL_GPIO_Init>
}
 8000e84:	bf00      	nop
 8000e86:	3730      	adds	r7, #48	; 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40004400 	.word	0x40004400

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff fe31 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f008 fbad 	bl	8009628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fc67 	bl	80007a0 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000ee0:	08009738 	.word	0x08009738
  ldr r2, =_sbss
 8000ee4:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000ee8:	20004d04 	.word	0x20004d04

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f8fc 	bl	8001116 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f7ff fd82 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fd54 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	200005ac 	.word	0x200005ac

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200005ac 	.word	0x200005ac

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff4c 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113e:	f7ff ff61 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001142:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff ffb1 	bl	80010b0 <NVIC_EncodePriority>
 800114e:	4602      	mov	r2, r0
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff80 	bl	800105c <__NVIC_SetPriority>
}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff54 	bl	8001020 <__NVIC_EnableIRQ>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e159      	b.n	8001450 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8148 	bne.w	800144a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a2 	beq.w	800144a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a56      	ldr	r2, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b54      	ldr	r3, [pc, #336]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x202>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x1fe>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x1fa>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <HAL_GPIO_Init+0x2fc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x1f6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_GPIO_Init+0x300>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x1f2>
 800136e:	2304      	movs	r3, #4
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001372:	2307      	movs	r3, #7
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f aea2 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e12b      	b.n	80016f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff f8ea 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2224      	movs	r2, #36	; 0x24
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014ec:	f001 ffa6 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80014f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a81      	ldr	r2, [pc, #516]	; (80016fc <HAL_I2C_Init+0x274>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d807      	bhi.n	800150c <HAL_I2C_Init+0x84>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a80      	ldr	r2, [pc, #512]	; (8001700 <HAL_I2C_Init+0x278>)
 8001500:	4293      	cmp	r3, r2
 8001502:	bf94      	ite	ls
 8001504:	2301      	movls	r3, #1
 8001506:	2300      	movhi	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	e006      	b.n	800151a <HAL_I2C_Init+0x92>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a7d      	ldr	r2, [pc, #500]	; (8001704 <HAL_I2C_Init+0x27c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	bf94      	ite	ls
 8001514:	2301      	movls	r3, #1
 8001516:	2300      	movhi	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e0e7      	b.n	80016f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4a78      	ldr	r2, [pc, #480]	; (8001708 <HAL_I2C_Init+0x280>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	430a      	orrs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a6a      	ldr	r2, [pc, #424]	; (80016fc <HAL_I2C_Init+0x274>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d802      	bhi.n	800155c <HAL_I2C_Init+0xd4>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3301      	adds	r3, #1
 800155a:	e009      	b.n	8001570 <HAL_I2C_Init+0xe8>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	4a69      	ldr	r2, [pc, #420]	; (800170c <HAL_I2C_Init+0x284>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	3301      	adds	r3, #1
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	430b      	orrs	r3, r1
 8001576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	495c      	ldr	r1, [pc, #368]	; (80016fc <HAL_I2C_Init+0x274>)
 800158c:	428b      	cmp	r3, r1
 800158e:	d819      	bhi.n	80015c4 <HAL_I2C_Init+0x13c>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1e59      	subs	r1, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fbb1 f3f3 	udiv	r3, r1, r3
 800159e:	1c59      	adds	r1, r3, #1
 80015a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015a4:	400b      	ands	r3, r1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00a      	beq.n	80015c0 <HAL_I2C_Init+0x138>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e59      	subs	r1, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015be:	e051      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e04f      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <HAL_I2C_Init+0x168>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e012      	b.n	8001616 <HAL_I2C_Init+0x18e>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_Init+0x196>
 800161a:	2301      	movs	r3, #1
 800161c:	e022      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10e      	bne.n	8001644 <HAL_I2C_Init+0x1bc>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e58      	subs	r0, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	440b      	add	r3, r1
 8001634:	fbb0 f3f3 	udiv	r3, r0, r3
 8001638:	3301      	adds	r3, #1
 800163a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001642:	e00f      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	0099      	lsls	r1, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	6809      	ldr	r1, [r1, #0]
 8001668:	4313      	orrs	r3, r2
 800166a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6911      	ldr	r1, [r2, #16]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68d2      	ldr	r2, [r2, #12]
 800169e:	4311      	orrs	r1, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	000186a0 	.word	0x000186a0
 8001700:	001e847f 	.word	0x001e847f
 8001704:	003d08ff 	.word	0x003d08ff
 8001708:	431bde83 	.word	0x431bde83
 800170c:	10624dd3 	.word	0x10624dd3

08001710 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	b08f      	sub	sp, #60	; 0x3c
 8001714:	af0a      	add	r7, sp, #40	; 0x28
 8001716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e10f      	b.n	8001942 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f007 fc7b 	bl	8009038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 f8b0 	bl	80048c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	687e      	ldr	r6, [r7, #4]
 800176e:	466d      	mov	r5, sp
 8001770:	f106 0410 	add.w	r4, r6, #16
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001780:	e885 0003 	stmia.w	r5, {r0, r1}
 8001784:	1d33      	adds	r3, r6, #4
 8001786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f002 ff87 	bl	800469c <USB_CoreInit>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0d0      	b.n	8001942 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f89e 	bl	80048e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e04a      	b.n	8001848 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	333d      	adds	r3, #61	; 0x3d
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	333c      	adds	r3, #60	; 0x3c
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	b298      	uxth	r0, r3
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3344      	adds	r3, #68	; 0x44
 80017ee:	4602      	mov	r2, r0
 80017f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3340      	adds	r3, #64	; 0x40
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3348      	adds	r3, #72	; 0x48
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	334c      	adds	r3, #76	; 0x4c
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3354      	adds	r3, #84	; 0x54
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	3301      	adds	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3af      	bcc.n	80017b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e044      	b.n	80018e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	3301      	adds	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d3b5      	bcc.n	8001858 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	687e      	ldr	r6, [r7, #4]
 80018f4:	466d      	mov	r5, sp
 80018f6:	f106 0410 	add.w	r4, r6, #16
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001906:	e885 0003 	stmia.w	r5, {r0, r1}
 800190a:	1d33      	adds	r3, r6, #4
 800190c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f003 f836 	bl	8004980 <USB_DevInit>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2202      	movs	r2, #2
 800191e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00d      	b.n	8001942 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f004 f985 	bl	8005c4a <USB_DevDisconnect>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800194a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_PCD_Start+0x1c>
 8001962:	2302      	movs	r3, #2
 8001964:	e020      	b.n	80019a8 <HAL_PCD_Start+0x5e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	2b01      	cmp	r3, #1
 8001974:	d109      	bne.n	800198a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f002 ff88 	bl	80048a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f004 f935 	bl	8005c08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08d      	sub	sp, #52	; 0x34
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f004 f9f3 	bl	8005db2 <USB_GetMode>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 848a 	bne.w	80022e8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 f957 	bl	8005c8c <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8480 	beq.w	80022e6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 f944 	bl	8005c8c <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d107      	bne.n	8001a1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f002 0202 	and.w	r2, r2, #2
 8001a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 f932 	bl	8005c8c <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d161      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699a      	ldr	r2, [r3, #24]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0210 	bic.w	r2, r2, #16
 8001a40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f003 020f 	and.w	r2, r3, #15
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3304      	adds	r3, #4
 8001a60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	0c5b      	lsrs	r3, r3, #17
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d124      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d035      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6a38      	ldr	r0, [r7, #32]
 8001a8e:	f003 ff69 	bl	8005964 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a9e:	441a      	add	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	6a1a      	ldr	r2, [r3, #32]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab0:	441a      	add	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	621a      	str	r2, [r3, #32]
 8001ab6:	e016      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	0c5b      	lsrs	r3, r3, #17
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d110      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001aca:	2208      	movs	r2, #8
 8001acc:	4619      	mov	r1, r3
 8001ace:	6a38      	ldr	r0, [r7, #32]
 8001ad0:	f003 ff48 	bl	8005964 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae0:	441a      	add	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0210 	orr.w	r2, r2, #16
 8001af4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f004 f8c6 	bl	8005c8c <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b0a:	f040 80a7 	bne.w	8001c5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 f8cb 	bl	8005cb2 <USB_ReadDevAllOutEpInterrupt>
 8001b1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b1e:	e099      	b.n	8001c54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 808e 	beq.w	8001c48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 f8ef 	bl	8005d1a <USB_ReadDevOutEPInterrupt>
 8001b3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00c      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b54:	461a      	mov	r2, r3
 8001b56:	2301      	movs	r3, #1
 8001b58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 feab 	bl	80028b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00c      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 ff81 	bl	8002a88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d030      	beq.n	8001c0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb4:	2b80      	cmp	r3, #128	; 0x80
 8001bb6:	d109      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	3304      	adds	r3, #4
 8001be0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	78db      	ldrb	r3, [r3, #3]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2200      	movs	r2, #0
 8001bee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f007 fb1a 	bl	8009230 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c24:	461a      	mov	r2, r3
 8001c26:	2320      	movs	r3, #32
 8001c28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c40:	461a      	mov	r2, r3
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f af62 	bne.w	8001b20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 f813 	bl	8005c8c <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c70:	f040 80db 	bne.w	8001e2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 f834 	bl	8005ce6 <USB_ReadDevAllInEpInterrupt>
 8001c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c84:	e0cd      	b.n	8001e22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80c2 	beq.w	8001e16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f004 f85a 	bl	8005d56 <USB_ReadDevInEPInterrupt>
 8001ca2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d057      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69f9      	ldr	r1, [r7, #28]
 8001cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cce:	4013      	ands	r3, r2
 8001cd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d132      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	334c      	adds	r3, #76	; 0x4c
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	3348      	adds	r3, #72	; 0x48
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4419      	add	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4403      	add	r3, r0
 8001d20:	334c      	adds	r3, #76	; 0x4c
 8001d22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d113      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x3a2>
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3354      	adds	r3, #84	; 0x54
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d108      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	f004 f861 	bl	8005e14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f007 f9ee 	bl	800913a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d74:	461a      	mov	r2, r3
 8001d76:	2308      	movs	r3, #8
 8001d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d90:	461a      	mov	r2, r3
 8001d92:	2310      	movs	r3, #16
 8001d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dac:	461a      	mov	r2, r3
 8001dae:	2340      	movs	r3, #64	; 0x40
 8001db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbe:	6a38      	ldr	r0, [r7, #32]
 8001dc0:	f002 ff42 	bl	8004c48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3338      	adds	r3, #56	; 0x38
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	78db      	ldrb	r3, [r3, #3]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f007 fa31 	bl	8009254 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2302      	movs	r3, #2
 8001e02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fcc3 	bl	800279c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	3301      	adds	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f47f af2e 	bne.w	8001c86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 ff2c 	bl	8005c8c <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e3e:	d122      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e66:	2100      	movs	r1, #0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 feab 	bl	8002bc4 <HAL_PCDEx_LPM_Callback>
 8001e6e:	e002      	b.n	8001e76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f007 f9cf 	bl	8009214 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fefe 	bl	8005c8c <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e9a:	d112      	bne.n	8001ec2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f007 f98b 	bl	80091c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ec0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 fee0 	bl	8005c8c <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed6:	f040 80b7 	bne.w	8002048 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fea7 	bl	8004c48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efe:	e046      	b.n	8001f8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f24:	0151      	lsls	r1, r2, #5
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	440a      	add	r2, r1
 8001f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f40:	461a      	mov	r2, r3
 8001f42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f58:	0151      	lsls	r1, r2, #5
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	440a      	add	r2, r1
 8001f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f78:	0151      	lsls	r1, r2, #5
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	440a      	add	r2, r1
 8001f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3b3      	bcc.n	8001f00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001faa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d016      	beq.n	8001fe2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc4:	f043 030b 	orr.w	r3, r3, #11
 8001fc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fda:	f043 030b 	orr.w	r3, r3, #11
 8001fde:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe0:	e015      	b.n	800200e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ff8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002008:	f043 030b 	orr.w	r3, r3, #11
 800200c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002020:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002032:	461a      	mov	r2, r3
 8002034:	f003 feee 	bl	8005e14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fe1d 	bl	8005c8c <USB_ReadInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205c:	d124      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 feb3 	bl	8005dce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f002 fe68 	bl	8004d42 <USB_GetDevSpeed>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681c      	ldr	r4, [r3, #0]
 800207e:	f001 f9d1 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8002082:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	4620      	mov	r0, r4
 800208e:	f002 fb67 	bl	8004760 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f007 f879 	bl	800918a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fded 	bl	8005c8c <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d10a      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f007 f856 	bl	800916e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f002 0208 	and.w	r2, r2, #8
 80020d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fdd8 	bl	8005c8c <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b80      	cmp	r3, #128	; 0x80
 80020e4:	d122      	bne.n	800212c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020f2:	2301      	movs	r3, #1
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	e014      	b.n	8002122 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fb0f 	bl	800273a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	3301      	adds	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002128:	429a      	cmp	r2, r3
 800212a:	d3e5      	bcc.n	80020f8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fdab 	bl	8005c8c <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002140:	d13b      	bne.n	80021ba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002142:	2301      	movs	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e02b      	b.n	80021a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3340      	adds	r3, #64	; 0x40
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d115      	bne.n	800219a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800216e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	da12      	bge.n	800219a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	333f      	adds	r3, #63	; 0x3f
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fad0 	bl	800273a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3ce      	bcc.n	8002148 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fd64 	bl	8005c8c <USB_ReadInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ce:	d155      	bne.n	800227c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d0:	2301      	movs	r3, #1
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	e045      	b.n	8002262 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d12e      	bne.n	800225c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	da2b      	bge.n	800225c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002210:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002214:	429a      	cmp	r2, r3
 8002216:	d121      	bne.n	800225c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002258:	6053      	str	r3, [r2, #4]
            break;
 800225a:	e007      	b.n	800226c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3301      	adds	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002268:	429a      	cmp	r2, r3
 800226a:	d3b4      	bcc.n	80021d6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800227a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fd03 	bl	8005c8c <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d10a      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f006 fff0 	bl	8009278 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fced 	bl	8005c8c <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d115      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f006 ffe0 	bl	8009294 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	e000      	b.n	80022e8 <HAL_PCD_IRQHandler+0x938>
      return;
 80022e6:	bf00      	nop
    }
  }
}
 80022e8:	3734      	adds	r7, #52	; 0x34
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}

080022ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_PCD_SetAddress+0x1a>
 8002304:	2302      	movs	r3, #2
 8002306:	e013      	b.n	8002330 <HAL_PCD_SetAddress+0x42>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fc4b 	bl	8005bbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	70fb      	strb	r3, [r7, #3]
 800234a:	460b      	mov	r3, r1
 800234c:	803b      	strh	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da0f      	bge.n	800237e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3338      	adds	r3, #56	; 0x38
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	705a      	strb	r2, [r3, #1]
 800237c:	e00f      	b.n	800239e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 020f 	and.w	r2, r3, #15
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023aa:	883a      	ldrh	r2, [r7, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	78ba      	ldrb	r2, [r7, #2]
 80023b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023c8:	78bb      	ldrb	r3, [r7, #2]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d102      	bne.n	80023d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_PCD_EP_Open+0xaa>
 80023de:	2302      	movs	r3, #2
 80023e0:	e00e      	b.n	8002400 <HAL_PCD_EP_Open+0xc8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fccb 	bl	8004d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80023fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da0f      	bge.n	800243c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3338      	adds	r3, #56	; 0x38
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
 800243a:	e00f      	b.n	800245c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_PCD_EP_Close+0x6e>
 8002472:	2302      	movs	r3, #2
 8002474:	e00e      	b.n	8002494 <HAL_PCD_EP_Close+0x8c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fd09 	bl	8004e9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	460b      	mov	r3, r1
 80024aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	f003 020f 	and.w	r2, r3, #15
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d102      	bne.n	80024f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6979      	ldr	r1, [r7, #20]
 8002510:	f002 ffe8 	bl	80054e4 <USB_EP0StartXfer>
 8002514:	e008      	b.n	8002528 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	6979      	ldr	r1, [r7, #20]
 8002524:	f002 fd96 	bl	8005054 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	460b      	mov	r3, r1
 8002540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002542:	7afb      	ldrb	r3, [r7, #11]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	3338      	adds	r3, #56	; 0x38
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2201      	movs	r2, #1
 8002570:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	b2da      	uxtb	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d102      	bne.n	800258c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6979      	ldr	r1, [r7, #20]
 80025a4:	f002 ff9e 	bl	80054e4 <USB_EP0StartXfer>
 80025a8:	e008      	b.n	80025bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	f002 fd4c 	bl	8005054 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 020f 	and.w	r2, r3, #15
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d901      	bls.n	80025e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e050      	b.n	8002686 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da0f      	bge.n	800260c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	f003 020f 	and.w	r2, r3, #15
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	3338      	adds	r3, #56	; 0x38
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	705a      	strb	r2, [r3, #1]
 800260a:	e00d      	b.n	8002628 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_PCD_EP_SetStall+0x82>
 8002644:	2302      	movs	r3, #2
 8002646:	e01e      	b.n	8002686 <HAL_PCD_EP_SetStall+0xc0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f9dc 	bl	8005a14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	b2d9      	uxtb	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002676:	461a      	mov	r2, r3
 8002678:	f003 fbcc 	bl	8005e14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 020f 	and.w	r2, r3, #15
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d901      	bls.n	80026ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e042      	b.n	8002732 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da0f      	bge.n	80026d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	3338      	adds	r3, #56	; 0x38
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	705a      	strb	r2, [r3, #1]
 80026d2:	e00f      	b.n	80026f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	b2da      	uxtb	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_PCD_EP_ClrStall+0x86>
 8002710:	2302      	movs	r3, #2
 8002712:	e00e      	b.n	8002732 <HAL_PCD_EP_ClrStall+0xa4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68f9      	ldr	r1, [r7, #12]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f9e4 	bl	8005af0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274a:	2b00      	cmp	r3, #0
 800274c:	da0c      	bge.n	8002768 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	f003 020f 	and.w	r2, r3, #15
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	3338      	adds	r3, #56	; 0x38
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	3304      	adds	r3, #4
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	e00c      	b.n	8002782 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 020f 	and.w	r2, r3, #15
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68f9      	ldr	r1, [r7, #12]
 8002788:	4618      	mov	r0, r3
 800278a:	f003 f803 	bl	8005794 <USB_EPStopXfer>
 800278e:	4603      	mov	r3, r0
 8002790:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002792:	7afb      	ldrb	r3, [r7, #11]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3338      	adds	r3, #56	; 0x38
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d901      	bls.n	80027d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e06c      	b.n	80028ae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d902      	bls.n	80027f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3303      	adds	r3, #3
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f8:	e02b      	b.n	8002852 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	429a      	cmp	r2, r3
 800280e:	d902      	bls.n	8002816 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3303      	adds	r3, #3
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800282e:	b2db      	uxtb	r3, r3
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4603      	mov	r3, r0
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f003 f857 	bl	80058e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	441a      	add	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a1a      	ldr	r2, [r3, #32]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	441a      	add	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	b29b      	uxth	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	429a      	cmp	r2, r3
 8002866:	d809      	bhi.n	800287c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002870:	429a      	cmp	r2, r3
 8002872:	d203      	bcs.n	800287c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1be      	bne.n	80027fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	429a      	cmp	r2, r3
 8002886:	d811      	bhi.n	80028ac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	2201      	movs	r2, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	6939      	ldr	r1, [r7, #16]
 80028a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028a8:	4013      	ands	r3, r2
 80028aa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	333c      	adds	r3, #60	; 0x3c
 80028d0:	3304      	adds	r3, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d17b      	bne.n	80029e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4a61      	ldr	r2, [pc, #388]	; (8002a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	f240 80b9 	bls.w	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80b3 	beq.w	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291a:	461a      	mov	r2, r3
 800291c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002920:	6093      	str	r3, [r2, #8]
 8002922:	e0a7      	b.n	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	461a      	mov	r2, r3
 800293c:	2320      	movs	r3, #32
 800293e:	6093      	str	r3, [r2, #8]
 8002940:	e098      	b.n	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 8093 	bne.w	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d90f      	bls.n	8002976 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296c:	461a      	mov	r2, r3
 800296e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002972:	6093      	str	r3, [r2, #8]
 8002974:	e07e      	b.n	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	0159      	lsls	r1, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	440b      	add	r3, r1
 8002998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d114      	bne.n	80029d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029c0:	461a      	mov	r2, r3
 80029c2:	2101      	movs	r1, #1
 80029c4:	f003 fa26 	bl	8005e14 <USB_EP0_OutStart>
 80029c8:	e006      	b.n	80029d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f006 fb90 	bl	8009104 <HAL_PCD_DataOutStageCallback>
 80029e4:	e046      	b.n	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d124      	bne.n	8002a38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a04:	461a      	mov	r2, r3
 8002a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a0a:	6093      	str	r3, [r2, #8]
 8002a0c:	e032      	b.n	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a24:	461a      	mov	r2, r3
 8002a26:	2320      	movs	r3, #32
 8002a28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f006 fb67 	bl	8009104 <HAL_PCD_DataOutStageCallback>
 8002a36:	e01d      	b.n	8002a74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d114      	bne.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d108      	bne.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a60:	461a      	mov	r2, r3
 8002a62:	2100      	movs	r1, #0
 8002a64:	f003 f9d6 	bl	8005e14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f006 fb48 	bl	8009104 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	4f54300a 	.word	0x4f54300a
 8002a84:	4f54310a 	.word	0x4f54310a

08002a88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	333c      	adds	r3, #60	; 0x3c
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d90e      	bls.n	8002adc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ada:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f006 faff 	bl	80090e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d90c      	bls.n	8002b04 <PCD_EP_OutSetupPacket_int+0x7c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d108      	bne.n	8002b04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002afc:	461a      	mov	r2, r3
 8002afe:	2101      	movs	r1, #1
 8002b00:	f003 f988 	bl	8005e14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	4f54300a 	.word	0x4f54300a

08002b14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
 8002b20:	4613      	mov	r3, r2
 8002b22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b32:	883b      	ldrh	r3, [r7, #0]
 8002b34:	0419      	lsls	r1, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b40:	e028      	b.n	8002b94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e00d      	b.n	8002b72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	3340      	adds	r3, #64	; 0x40
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4413      	add	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3ec      	bcc.n	8002b56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b7c:	883b      	ldrh	r3, [r7, #0]
 8002b7e:	0418      	lsls	r0, r3, #16
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4302      	orrs	r2, r0
 8002b8c:	3340      	adds	r3, #64	; 0x40
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e267      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d075      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfa:	4b88      	ldr	r3, [pc, #544]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d00c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b85      	ldr	r3, [pc, #532]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d112      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c12:	4b82      	ldr	r3, [pc, #520]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1e:	d10b      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	4b7e      	ldr	r3, [pc, #504]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d05b      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x108>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d157      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e242      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d106      	bne.n	8002c50 <HAL_RCC_OscConfig+0x74>
 8002c42:	4b76      	ldr	r3, [pc, #472]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a75      	ldr	r2, [pc, #468]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xb0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x98>
 8002c5a:	4b70      	ldr	r3, [pc, #448]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6f      	ldr	r2, [pc, #444]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6c      	ldr	r2, [pc, #432]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xb0>
 8002c74:	4b69      	ldr	r3, [pc, #420]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a68      	ldr	r2, [pc, #416]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a65      	ldr	r2, [pc, #404]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe f962 	bl	8000f5c <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe f95e 	bl	8000f5c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e207      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xc0>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f94e 	bl	8000f5c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe f94a 	bl	8000f5c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1f3      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xe8>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x152>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1c7      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4937      	ldr	r1, [pc, #220]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	e03a      	b.n	8002dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <HAL_RCC_OscConfig+0x244>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe f903 	bl	8000f5c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f8ff 	bl	8000f5c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1a8      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4925      	ldr	r1, [pc, #148]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x244>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe f8e2 	bl	8000f5c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe f8de 	bl	8000f5c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e187      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d036      	beq.n	8002e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_RCC_OscConfig+0x248>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f8c2 	bl	8000f5c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe f8be 	bl	8000f5c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e167      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_OscConfig+0x240>)
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x200>
 8002dfa:	e01b      	b.n	8002e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x248>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fe f8ab 	bl	8000f5c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	e00e      	b.n	8002e28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f8a7 	bl	8000f5c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d907      	bls.n	8002e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e150      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	42470000 	.word	0x42470000
 8002e24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ea      	bne.n	8002e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8097 	beq.w	8002f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b81      	ldr	r3, [pc, #516]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10f      	bne.n	8002e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	4b7d      	ldr	r3, [pc, #500]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a7c      	ldr	r2, [pc, #496]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b7a      	ldr	r3, [pc, #488]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b77      	ldr	r3, [pc, #476]	; (8003050 <HAL_RCC_OscConfig+0x474>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7e:	4b74      	ldr	r3, [pc, #464]	; (8003050 <HAL_RCC_OscConfig+0x474>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a73      	ldr	r2, [pc, #460]	; (8003050 <HAL_RCC_OscConfig+0x474>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe f867 	bl	8000f5c <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe f863 	bl	8000f5c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e10c      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_OscConfig+0x474>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x2ea>
 8002eb8:	4b64      	ldr	r3, [pc, #400]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a63      	ldr	r2, [pc, #396]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	e01c      	b.n	8002f00 <HAL_RCC_OscConfig+0x324>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x30c>
 8002ece:	4b5f      	ldr	r3, [pc, #380]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a5e      	ldr	r2, [pc, #376]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eda:	4b5c      	ldr	r3, [pc, #368]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a5b      	ldr	r2, [pc, #364]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0x324>
 8002ee8:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a57      	ldr	r2, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	4b55      	ldr	r3, [pc, #340]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a54      	ldr	r2, [pc, #336]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe f828 	bl	8000f5c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fe f824 	bl	8000f5c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0cb      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f26:	4b49      	ldr	r3, [pc, #292]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0ee      	beq.n	8002f10 <HAL_RCC_OscConfig+0x334>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7fe f812 	bl	8000f5c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f80e 	bl	8000f5c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0b5      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f52:	4b3e      	ldr	r3, [pc, #248]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1ee      	bne.n	8002f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4a38      	ldr	r2, [pc, #224]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80a1 	beq.w	80030bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7a:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d05c      	beq.n	8003040 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d141      	bne.n	8003012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_RCC_OscConfig+0x478>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fd ffe2 	bl	8000f5c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fd ffde 	bl	8000f5c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e087      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	491b      	ldr	r1, [pc, #108]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x478>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd ffb7 	bl	8000f5c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fd ffb3 	bl	8000f5c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e05c      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x416>
 8003010:	e054      	b.n	80030bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_RCC_OscConfig+0x478>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fd ffa0 	bl	8000f5c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fd ff9c 	bl	8000f5c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e045      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_OscConfig+0x470>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x444>
 800303e:	e03d      	b.n	80030bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d107      	bne.n	8003058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e038      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
 800304c:	40023800 	.word	0x40023800
 8003050:	40007000 	.word	0x40007000
 8003054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCC_OscConfig+0x4ec>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d028      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d121      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d11a      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800308e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003090:	4293      	cmp	r3, r2
 8003092:	d111      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0cc      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d90c      	bls.n	8003108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0b8      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003120:	4b59      	ldr	r3, [pc, #356]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a58      	ldr	r2, [pc, #352]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003138:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a52      	ldr	r2, [pc, #328]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	494d      	ldr	r1, [pc, #308]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d044      	beq.n	80031ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d119      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d003      	beq.n	800318a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	2b03      	cmp	r3, #3
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e067      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031aa:	4b37      	ldr	r3, [pc, #220]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4934      	ldr	r1, [pc, #208]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031bc:	f7fd fece 	bl	8000f5c <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7fd feca 	bl	8000f5c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e04f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 020c 	and.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1eb      	bne.n	80031c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d20c      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e032      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4916      	ldr	r1, [pc, #88]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003252:	f000 f821 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003256:	4602      	mov	r2, r0
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	490a      	ldr	r1, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	5ccb      	ldrb	r3, [r1, r3]
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd fbd8 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40023800 	.word	0x40023800
 800328c:	08009710 	.word	0x08009710
 8003290:	20000000 	.word	0x20000000
 8003294:	20000004 	.word	0x20000004

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b090      	sub	sp, #64	; 0x40
 800329e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
 80032a4:	2300      	movs	r3, #0
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a8:	2300      	movs	r3, #0
 80032aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d00d      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x40>
 80032bc:	2b08      	cmp	r3, #8
 80032be:	f200 80a1 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x16c>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ca:	e09b      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_GetSysClockFreq+0x184>)
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032d0:	e09b      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d2:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032d6:	e098      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d8:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_RCC_GetSysClockFreq+0x180>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e2:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d028      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	2200      	movs	r2, #0
 80032f6:	623b      	str	r3, [r7, #32]
 80032f8:	627a      	str	r2, [r7, #36]	; 0x24
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003300:	2100      	movs	r1, #0
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_GetSysClockFreq+0x188>)
 8003304:	fb03 f201 	mul.w	r2, r3, r1
 8003308:	2300      	movs	r3, #0
 800330a:	fb00 f303 	mul.w	r3, r0, r3
 800330e:	4413      	add	r3, r2
 8003310:	4a43      	ldr	r2, [pc, #268]	; (8003420 <HAL_RCC_GetSysClockFreq+0x188>)
 8003312:	fba0 1202 	umull	r1, r2, r0, r2
 8003316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003318:	460a      	mov	r2, r1
 800331a:	62ba      	str	r2, [r7, #40]	; 0x28
 800331c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331e:	4413      	add	r3, r2
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	2200      	movs	r2, #0
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	61fa      	str	r2, [r7, #28]
 800332a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800332e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003332:	f7fc ff55 	bl	80001e0 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4613      	mov	r3, r2
 800333c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800333e:	e053      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCC_GetSysClockFreq+0x180>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	2200      	movs	r2, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	617a      	str	r2, [r7, #20]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003352:	f04f 0b00 	mov.w	fp, #0
 8003356:	4652      	mov	r2, sl
 8003358:	465b      	mov	r3, fp
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	0159      	lsls	r1, r3, #5
 8003364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003368:	0150      	lsls	r0, r2, #5
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	ebb2 080a 	subs.w	r8, r2, sl
 8003372:	eb63 090b 	sbc.w	r9, r3, fp
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800338a:	ebb2 0408 	subs.w	r4, r2, r8
 800338e:	eb63 0509 	sbc.w	r5, r3, r9
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	00eb      	lsls	r3, r5, #3
 800339c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a0:	00e2      	lsls	r2, r4, #3
 80033a2:	4614      	mov	r4, r2
 80033a4:	461d      	mov	r5, r3
 80033a6:	eb14 030a 	adds.w	r3, r4, sl
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	eb45 030b 	adc.w	r3, r5, fp
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033be:	4629      	mov	r1, r5
 80033c0:	028b      	lsls	r3, r1, #10
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c8:	4621      	mov	r1, r4
 80033ca:	028a      	lsls	r2, r1, #10
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d2:	2200      	movs	r2, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	60fa      	str	r2, [r7, #12]
 80033d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033dc:	f7fc ff00 	bl	80001e0 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetSysClockFreq+0x184>)
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800340c:	4618      	mov	r0, r3
 800340e:	3740      	adds	r7, #64	; 0x40
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	017d7840 	.word	0x017d7840

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000000 	.word	0x20000000

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08009720 	.word	0x08009720

08003464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003468:	f7ff ffdc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	08009720 	.word	0x08009720

0800348c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	220f      	movs	r2, #15
 800349a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_GetClockConfig+0x5c>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0203 	and.w	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_RCC_GetClockConfig+0x5c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_RCC_GetClockConfig+0x5c>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_GetClockConfig+0x5c>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCC_GetClockConfig+0x60>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0207 	and.w	r2, r3, #7
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	601a      	str	r2, [r3, #0]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40023c00 	.word	0x40023c00

080034f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e07b      	b.n	80035fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003512:	d009      	beq.n	8003528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]
 800351a:	e005      	b.n	8003528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd f9fc 	bl	8000940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	ea42 0103 	orr.w	r1, r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0104 	and.w	r1, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0210 	and.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e041      	b.n	8003698 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f839 	bl	80036a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f000 fadb 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d001      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e044      	b.n	8003756 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_TIM_Base_Start_IT+0xb0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x6c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f6:	d013      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x6c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_TIM_Base_Start_IT+0xb4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x6c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_TIM_Base_Start_IT+0xb8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x6c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_TIM_Base_Start_IT+0xbc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x6c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a16      	ldr	r2, [pc, #88]	; (8003774 <HAL_TIM_Base_Start_IT+0xc0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d111      	bne.n	8003744 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b06      	cmp	r3, #6
 8003730:	d010      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	e007      	b.n	8003754 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40010000 	.word	0x40010000
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40000c00 	.word	0x40000c00
 8003774:	40014000 	.word	0x40014000

08003778 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fa50 	bl	8000c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 fa20 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d122      	bne.n	8003872 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d11b      	bne.n	8003872 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f06f 0202 	mvn.w	r2, #2
 8003842:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9b1 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 800385e:	e005      	b.n	800386c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f9a3 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9b4 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d122      	bne.n	80038c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d11b      	bne.n	80038c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0204 	mvn.w	r2, #4
 8003896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f987 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 80038b2:	e005      	b.n	80038c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f979 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f98a 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d122      	bne.n	800391a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d11b      	bne.n	800391a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0208 	mvn.w	r2, #8
 80038ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2204      	movs	r2, #4
 80038f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f95d 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 8003906:	e005      	b.n	8003914 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f94f 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f960 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b10      	cmp	r3, #16
 8003926:	d122      	bne.n	800396e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b10      	cmp	r3, #16
 8003934:	d11b      	bne.n	800396e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f06f 0210 	mvn.w	r2, #16
 800393e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2208      	movs	r2, #8
 8003944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f933 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 800395a:	e005      	b.n	8003968 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f925 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f936 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10e      	bne.n	800399a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f06f 0201 	mvn.w	r2, #1
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fc ff85 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d10e      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fb9f 	bl	8004104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d10e      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d107      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8fb 	bl	8003be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d10e      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0220 	mvn.w	r2, #32
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fb69 	bl	80040f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0ae      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	f200 809f 	bhi.w	8003b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003b95 	.word	0x08003b95
 8003a64:	08003b95 	.word	0x08003b95
 8003a68:	08003b95 	.word	0x08003b95
 8003a6c:	08003ad1 	.word	0x08003ad1
 8003a70:	08003b95 	.word	0x08003b95
 8003a74:	08003b95 	.word	0x08003b95
 8003a78:	08003b95 	.word	0x08003b95
 8003a7c:	08003b13 	.word	0x08003b13
 8003a80:	08003b95 	.word	0x08003b95
 8003a84:	08003b95 	.word	0x08003b95
 8003a88:	08003b95 	.word	0x08003b95
 8003a8c:	08003b53 	.word	0x08003b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f930 	bl	8003cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0208 	orr.w	r2, r2, #8
 8003aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0204 	bic.w	r2, r2, #4
 8003aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6999      	ldr	r1, [r3, #24]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	619a      	str	r2, [r3, #24]
      break;
 8003ace:	e064      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f976 	bl	8003dc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
      break;
 8003b10:	e043      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f9c1 	bl	8003ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0208 	orr.w	r2, r2, #8
 8003b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0204 	bic.w	r2, r2, #4
 8003b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	61da      	str	r2, [r3, #28]
      break;
 8003b50:	e023      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fa0b 	bl	8003f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69d9      	ldr	r1, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	021a      	lsls	r2, r3, #8
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	61da      	str	r2, [r3, #28]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
      break;
 8003b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a34      	ldr	r2, [pc, #208]	; (8003ce0 <TIM_Base_SetConfig+0xe4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00f      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d00b      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a31      	ldr	r2, [pc, #196]	; (8003ce4 <TIM_Base_SetConfig+0xe8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <TIM_Base_SetConfig+0xec>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <TIM_Base_SetConfig+0xf0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d108      	bne.n	8003c46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <TIM_Base_SetConfig+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01b      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d017      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <TIM_Base_SetConfig+0xe8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <TIM_Base_SetConfig+0xec>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <TIM_Base_SetConfig+0xf0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <TIM_Base_SetConfig+0xf4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <TIM_Base_SetConfig+0xf8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <TIM_Base_SetConfig+0xfc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <TIM_Base_SetConfig+0xe4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d103      	bne.n	8003ccc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800

08003cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 0302 	bic.w	r3, r3, #2
 8003d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <TIM_OC1_SetConfig+0xc8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10c      	bne.n	8003d72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0308 	bic.w	r3, r3, #8
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <TIM_OC1_SetConfig+0xc8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d111      	bne.n	8003d9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0210 	bic.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0320 	bic.w	r3, r3, #32
 8003e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <TIM_OC2_SetConfig+0xd4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10d      	bne.n	8003e44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <TIM_OC2_SetConfig+0xd4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d113      	bne.n	8003e74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10d      	bne.n	8003f1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d113      	bne.n	8003f4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40010000 	.word	0x40010000

08003f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a10      	ldr	r2, [pc, #64]	; (8004010 <TIM_OC4_SetConfig+0x9c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000

08004014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004028:	2302      	movs	r3, #2
 800402a:	e050      	b.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d013      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10c      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40014000 	.word	0x40014000

080040f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e03f      	b.n	80041aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc fe30 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f829 	bl	80041b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b0c0      	sub	sp, #256	; 0x100
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	68d9      	ldr	r1, [r3, #12]
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	ea40 0301 	orr.w	r3, r0, r1
 80041dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800420c:	f021 010c 	bic.w	r1, r1, #12
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800421a:	430b      	orrs	r3, r1
 800421c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	6999      	ldr	r1, [r3, #24]
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	ea40 0301 	orr.w	r3, r0, r1
 800423a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b8f      	ldr	r3, [pc, #572]	; (8004480 <UART_SetConfig+0x2cc>)
 8004244:	429a      	cmp	r2, r3
 8004246:	d005      	beq.n	8004254 <UART_SetConfig+0xa0>
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b8d      	ldr	r3, [pc, #564]	; (8004484 <UART_SetConfig+0x2d0>)
 8004250:	429a      	cmp	r2, r3
 8004252:	d104      	bne.n	800425e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7ff f906 	bl	8003464 <HAL_RCC_GetPCLK2Freq>
 8004258:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800425c:	e003      	b.n	8004266 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800425e:	f7ff f8ed 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8004262:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004270:	f040 810c 	bne.w	800448c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004278:	2200      	movs	r2, #0
 800427a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800427e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	1891      	adds	r1, r2, r2
 800428c:	65b9      	str	r1, [r7, #88]	; 0x58
 800428e:	415b      	adcs	r3, r3
 8004290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004292:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004296:	4621      	mov	r1, r4
 8004298:	eb12 0801 	adds.w	r8, r2, r1
 800429c:	4629      	mov	r1, r5
 800429e:	eb43 0901 	adc.w	r9, r3, r1
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b6:	4690      	mov	r8, r2
 80042b8:	4699      	mov	r9, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	eb18 0303 	adds.w	r3, r8, r3
 80042c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042c4:	462b      	mov	r3, r5
 80042c6:	eb49 0303 	adc.w	r3, r9, r3
 80042ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042e2:	460b      	mov	r3, r1
 80042e4:	18db      	adds	r3, r3, r3
 80042e6:	653b      	str	r3, [r7, #80]	; 0x50
 80042e8:	4613      	mov	r3, r2
 80042ea:	eb42 0303 	adc.w	r3, r2, r3
 80042ee:	657b      	str	r3, [r7, #84]	; 0x54
 80042f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042f8:	f7fb ff72 	bl	80001e0 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4b61      	ldr	r3, [pc, #388]	; (8004488 <UART_SetConfig+0x2d4>)
 8004302:	fba3 2302 	umull	r2, r3, r3, r2
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	011c      	lsls	r4, r3, #4
 800430a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004314:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004318:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	1891      	adds	r1, r2, r2
 8004322:	64b9      	str	r1, [r7, #72]	; 0x48
 8004324:	415b      	adcs	r3, r3
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800432c:	4641      	mov	r1, r8
 800432e:	eb12 0a01 	adds.w	sl, r2, r1
 8004332:	4649      	mov	r1, r9
 8004334:	eb43 0b01 	adc.w	fp, r3, r1
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004344:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800434c:	4692      	mov	sl, r2
 800434e:	469b      	mov	fp, r3
 8004350:	4643      	mov	r3, r8
 8004352:	eb1a 0303 	adds.w	r3, sl, r3
 8004356:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800435a:	464b      	mov	r3, r9
 800435c:	eb4b 0303 	adc.w	r3, fp, r3
 8004360:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004370:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004378:	460b      	mov	r3, r1
 800437a:	18db      	adds	r3, r3, r3
 800437c:	643b      	str	r3, [r7, #64]	; 0x40
 800437e:	4613      	mov	r3, r2
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	647b      	str	r3, [r7, #68]	; 0x44
 8004386:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800438a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800438e:	f7fb ff27 	bl	80001e0 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4611      	mov	r1, r2
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <UART_SetConfig+0x2d4>)
 800439a:	fba3 2301 	umull	r2, r3, r3, r1
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2264      	movs	r2, #100	; 0x64
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	1acb      	subs	r3, r1, r3
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043ae:	4b36      	ldr	r3, [pc, #216]	; (8004488 <UART_SetConfig+0x2d4>)
 80043b0:	fba3 2302 	umull	r2, r3, r3, r2
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043bc:	441c      	add	r4, r3
 80043be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	1891      	adds	r1, r2, r2
 80043d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043d8:	415b      	adcs	r3, r3
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043e0:	4641      	mov	r1, r8
 80043e2:	1851      	adds	r1, r2, r1
 80043e4:	6339      	str	r1, [r7, #48]	; 0x30
 80043e6:	4649      	mov	r1, r9
 80043e8:	414b      	adcs	r3, r1
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043f8:	4659      	mov	r1, fp
 80043fa:	00cb      	lsls	r3, r1, #3
 80043fc:	4651      	mov	r1, sl
 80043fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004402:	4651      	mov	r1, sl
 8004404:	00ca      	lsls	r2, r1, #3
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
 800440a:	4603      	mov	r3, r0
 800440c:	4642      	mov	r2, r8
 800440e:	189b      	adds	r3, r3, r2
 8004410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004414:	464b      	mov	r3, r9
 8004416:	460a      	mov	r2, r1
 8004418:	eb42 0303 	adc.w	r3, r2, r3
 800441c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800442c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004434:	460b      	mov	r3, r1
 8004436:	18db      	adds	r3, r3, r3
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
 800443a:	4613      	mov	r3, r2
 800443c:	eb42 0303 	adc.w	r3, r2, r3
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800444a:	f7fb fec9 	bl	80001e0 <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <UART_SetConfig+0x2d4>)
 8004454:	fba3 1302 	umull	r1, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	2164      	movs	r1, #100	; 0x64
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	3332      	adds	r3, #50	; 0x32
 8004466:	4a08      	ldr	r2, [pc, #32]	; (8004488 <UART_SetConfig+0x2d4>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	f003 0207 	and.w	r2, r3, #7
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4422      	add	r2, r4
 800447a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800447c:	e105      	b.n	800468a <UART_SetConfig+0x4d6>
 800447e:	bf00      	nop
 8004480:	40011000 	.word	0x40011000
 8004484:	40011400 	.word	0x40011400
 8004488:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800448c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004490:	2200      	movs	r2, #0
 8004492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004496:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800449a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800449e:	4642      	mov	r2, r8
 80044a0:	464b      	mov	r3, r9
 80044a2:	1891      	adds	r1, r2, r2
 80044a4:	6239      	str	r1, [r7, #32]
 80044a6:	415b      	adcs	r3, r3
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
 80044aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ae:	4641      	mov	r1, r8
 80044b0:	1854      	adds	r4, r2, r1
 80044b2:	4649      	mov	r1, r9
 80044b4:	eb43 0501 	adc.w	r5, r3, r1
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	00eb      	lsls	r3, r5, #3
 80044c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c6:	00e2      	lsls	r2, r4, #3
 80044c8:	4614      	mov	r4, r2
 80044ca:	461d      	mov	r5, r3
 80044cc:	4643      	mov	r3, r8
 80044ce:	18e3      	adds	r3, r4, r3
 80044d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044d4:	464b      	mov	r3, r9
 80044d6:	eb45 0303 	adc.w	r3, r5, r3
 80044da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044fa:	4629      	mov	r1, r5
 80044fc:	008b      	lsls	r3, r1, #2
 80044fe:	4621      	mov	r1, r4
 8004500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004504:	4621      	mov	r1, r4
 8004506:	008a      	lsls	r2, r1, #2
 8004508:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800450c:	f7fb fe68 	bl	80001e0 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4b60      	ldr	r3, [pc, #384]	; (8004698 <UART_SetConfig+0x4e4>)
 8004516:	fba3 2302 	umull	r2, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	011c      	lsls	r4, r3, #4
 800451e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004522:	2200      	movs	r2, #0
 8004524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004528:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800452c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	1891      	adds	r1, r2, r2
 8004536:	61b9      	str	r1, [r7, #24]
 8004538:	415b      	adcs	r3, r3
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004540:	4641      	mov	r1, r8
 8004542:	1851      	adds	r1, r2, r1
 8004544:	6139      	str	r1, [r7, #16]
 8004546:	4649      	mov	r1, r9
 8004548:	414b      	adcs	r3, r1
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004558:	4659      	mov	r1, fp
 800455a:	00cb      	lsls	r3, r1, #3
 800455c:	4651      	mov	r1, sl
 800455e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004562:	4651      	mov	r1, sl
 8004564:	00ca      	lsls	r2, r1, #3
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	4603      	mov	r3, r0
 800456c:	4642      	mov	r2, r8
 800456e:	189b      	adds	r3, r3, r2
 8004570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004574:	464b      	mov	r3, r9
 8004576:	460a      	mov	r2, r1
 8004578:	eb42 0303 	adc.w	r3, r2, r3
 800457c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	67bb      	str	r3, [r7, #120]	; 0x78
 800458a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004598:	4649      	mov	r1, r9
 800459a:	008b      	lsls	r3, r1, #2
 800459c:	4641      	mov	r1, r8
 800459e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a2:	4641      	mov	r1, r8
 80045a4:	008a      	lsls	r2, r1, #2
 80045a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045aa:	f7fb fe19 	bl	80001e0 <__aeabi_uldivmod>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4b39      	ldr	r3, [pc, #228]	; (8004698 <UART_SetConfig+0x4e4>)
 80045b4:	fba3 1302 	umull	r1, r3, r3, r2
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	2164      	movs	r1, #100	; 0x64
 80045bc:	fb01 f303 	mul.w	r3, r1, r3
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	3332      	adds	r3, #50	; 0x32
 80045c6:	4a34      	ldr	r2, [pc, #208]	; (8004698 <UART_SetConfig+0x4e4>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d2:	441c      	add	r4, r3
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	673b      	str	r3, [r7, #112]	; 0x70
 80045dc:	677a      	str	r2, [r7, #116]	; 0x74
 80045de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045e2:	4642      	mov	r2, r8
 80045e4:	464b      	mov	r3, r9
 80045e6:	1891      	adds	r1, r2, r2
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	415b      	adcs	r3, r3
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f2:	4641      	mov	r1, r8
 80045f4:	1851      	adds	r1, r2, r1
 80045f6:	6039      	str	r1, [r7, #0]
 80045f8:	4649      	mov	r1, r9
 80045fa:	414b      	adcs	r3, r1
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800460a:	4659      	mov	r1, fp
 800460c:	00cb      	lsls	r3, r1, #3
 800460e:	4651      	mov	r1, sl
 8004610:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004614:	4651      	mov	r1, sl
 8004616:	00ca      	lsls	r2, r1, #3
 8004618:	4610      	mov	r0, r2
 800461a:	4619      	mov	r1, r3
 800461c:	4603      	mov	r3, r0
 800461e:	4642      	mov	r2, r8
 8004620:	189b      	adds	r3, r3, r2
 8004622:	66bb      	str	r3, [r7, #104]	; 0x68
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	663b      	str	r3, [r7, #96]	; 0x60
 8004638:	667a      	str	r2, [r7, #100]	; 0x64
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004646:	4649      	mov	r1, r9
 8004648:	008b      	lsls	r3, r1, #2
 800464a:	4641      	mov	r1, r8
 800464c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004650:	4641      	mov	r1, r8
 8004652:	008a      	lsls	r2, r1, #2
 8004654:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004658:	f7fb fdc2 	bl	80001e0 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <UART_SetConfig+0x4e4>)
 8004662:	fba3 1302 	umull	r1, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2164      	movs	r1, #100	; 0x64
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	; 0x32
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <UART_SetConfig+0x4e4>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4422      	add	r2, r4
 8004688:	609a      	str	r2, [r3, #8]
}
 800468a:	bf00      	nop
 800468c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004690:	46bd      	mov	sp, r7
 8004692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004696:	bf00      	nop
 8004698:	51eb851f 	.word	0x51eb851f

0800469c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800469c:	b084      	sub	sp, #16
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	f107 001c 	add.w	r0, r7, #28
 80046aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d122      	bne.n	80046fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f001 fbee 	bl	8005ed0 <USB_CoreReset>
 80046f4:	4603      	mov	r3, r0
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e01a      	b.n	8004730 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f001 fbe2 	bl	8005ed0 <USB_CoreReset>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
 8004722:	e005      	b.n	8004730 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10b      	bne.n	800474e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f043 0206 	orr.w	r2, r3, #6
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800475a:	b004      	add	sp, #16
 800475c:	4770      	bx	lr
	...

08004760 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d165      	bne.n	8004840 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a41      	ldr	r2, [pc, #260]	; (800487c <USB_SetTurnaroundTime+0x11c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d906      	bls.n	800478a <USB_SetTurnaroundTime+0x2a>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a40      	ldr	r2, [pc, #256]	; (8004880 <USB_SetTurnaroundTime+0x120>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d202      	bcs.n	800478a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004784:	230f      	movs	r3, #15
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e062      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4a3c      	ldr	r2, [pc, #240]	; (8004880 <USB_SetTurnaroundTime+0x120>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d306      	bcc.n	80047a0 <USB_SetTurnaroundTime+0x40>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a3b      	ldr	r2, [pc, #236]	; (8004884 <USB_SetTurnaroundTime+0x124>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d202      	bcs.n	80047a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800479a:	230e      	movs	r3, #14
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e057      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a38      	ldr	r2, [pc, #224]	; (8004884 <USB_SetTurnaroundTime+0x124>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d306      	bcc.n	80047b6 <USB_SetTurnaroundTime+0x56>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a37      	ldr	r2, [pc, #220]	; (8004888 <USB_SetTurnaroundTime+0x128>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d202      	bcs.n	80047b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047b0:	230d      	movs	r3, #13
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e04c      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a33      	ldr	r2, [pc, #204]	; (8004888 <USB_SetTurnaroundTime+0x128>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d306      	bcc.n	80047cc <USB_SetTurnaroundTime+0x6c>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a32      	ldr	r2, [pc, #200]	; (800488c <USB_SetTurnaroundTime+0x12c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d802      	bhi.n	80047cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047c6:	230c      	movs	r3, #12
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e041      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4a2f      	ldr	r2, [pc, #188]	; (800488c <USB_SetTurnaroundTime+0x12c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d906      	bls.n	80047e2 <USB_SetTurnaroundTime+0x82>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4a2e      	ldr	r2, [pc, #184]	; (8004890 <USB_SetTurnaroundTime+0x130>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d802      	bhi.n	80047e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047dc:	230b      	movs	r3, #11
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e036      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <USB_SetTurnaroundTime+0x130>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d906      	bls.n	80047f8 <USB_SetTurnaroundTime+0x98>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4a29      	ldr	r2, [pc, #164]	; (8004894 <USB_SetTurnaroundTime+0x134>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d802      	bhi.n	80047f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047f2:	230a      	movs	r3, #10
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e02b      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a26      	ldr	r2, [pc, #152]	; (8004894 <USB_SetTurnaroundTime+0x134>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d906      	bls.n	800480e <USB_SetTurnaroundTime+0xae>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4a25      	ldr	r2, [pc, #148]	; (8004898 <USB_SetTurnaroundTime+0x138>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d202      	bcs.n	800480e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004808:	2309      	movs	r3, #9
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e020      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <USB_SetTurnaroundTime+0x138>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d306      	bcc.n	8004824 <USB_SetTurnaroundTime+0xc4>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4a20      	ldr	r2, [pc, #128]	; (800489c <USB_SetTurnaroundTime+0x13c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d802      	bhi.n	8004824 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800481e:	2308      	movs	r3, #8
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e015      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4a1d      	ldr	r2, [pc, #116]	; (800489c <USB_SetTurnaroundTime+0x13c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d906      	bls.n	800483a <USB_SetTurnaroundTime+0xda>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <USB_SetTurnaroundTime+0x140>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d202      	bcs.n	800483a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004834:	2307      	movs	r3, #7
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e00a      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800483a:	2306      	movs	r3, #6
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e007      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004846:	2309      	movs	r3, #9
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e001      	b.n	8004850 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800484c:	2309      	movs	r3, #9
 800484e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	00d8acbf 	.word	0x00d8acbf
 8004880:	00e4e1c0 	.word	0x00e4e1c0
 8004884:	00f42400 	.word	0x00f42400
 8004888:	01067380 	.word	0x01067380
 800488c:	011a499f 	.word	0x011a499f
 8004890:	01312cff 	.word	0x01312cff
 8004894:	014ca43f 	.word	0x014ca43f
 8004898:	016e3600 	.word	0x016e3600
 800489c:	01a6ab1f 	.word	0x01a6ab1f
 80048a0:	01e84800 	.word	0x01e84800

080048a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f043 0201 	orr.w	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d115      	bne.n	8004936 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004916:	2001      	movs	r0, #1
 8004918:	f7fc fb2c 	bl	8000f74 <HAL_Delay>
      ms++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3301      	adds	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 fa45 	bl	8005db2 <USB_GetMode>
 8004928:	4603      	mov	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d01e      	beq.n	800496c <USB_SetCurrentMode+0x84>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b31      	cmp	r3, #49	; 0x31
 8004932:	d9f0      	bls.n	8004916 <USB_SetCurrentMode+0x2e>
 8004934:	e01a      	b.n	800496c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d115      	bne.n	8004968 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004948:	2001      	movs	r0, #1
 800494a:	f7fc fb13 	bl	8000f74 <HAL_Delay>
      ms++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f001 fa2c 	bl	8005db2 <USB_GetMode>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <USB_SetCurrentMode+0x84>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b31      	cmp	r3, #49	; 0x31
 8004964:	d9f0      	bls.n	8004948 <USB_SetCurrentMode+0x60>
 8004966:	e001      	b.n	800496c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e005      	b.n	8004978 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b32      	cmp	r3, #50	; 0x32
 8004970:	d101      	bne.n	8004976 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004980:	b084      	sub	sp, #16
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800498e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e009      	b.n	80049b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3340      	adds	r3, #64	; 0x40
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	2200      	movs	r2, #0
 80049ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3301      	adds	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b0e      	cmp	r3, #14
 80049b8:	d9f2      	bls.n	80049a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11c      	bne.n	80049fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ce:	f043 0302 	orr.w	r3, r3, #2
 80049d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
 80049f8:	e00b      	b.n	8004a12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	4619      	mov	r1, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	680b      	ldr	r3, [r1, #0]
 8004a30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10c      	bne.n	8004a52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a3e:	2100      	movs	r1, #0
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f965 	bl	8004d10 <USB_SetDevSpeed>
 8004a46:	e008      	b.n	8004a5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a48:	2101      	movs	r1, #1
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f960 	bl	8004d10 <USB_SetDevSpeed>
 8004a50:	e003      	b.n	8004a5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a52:	2103      	movs	r1, #3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f95b 	bl	8004d10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a5a:	2110      	movs	r1, #16
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8f3 	bl	8004c48 <USB_FlushTxFifo>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f91f 	bl	8004cb0 <USB_FlushRxFifo>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	461a      	mov	r2, r3
 8004a84:	2300      	movs	r3, #0
 8004a86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2300      	movs	r3, #0
 8004a92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	e043      	b.n	8004b2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004abc:	d118      	bne.n	8004af0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e013      	b.n	8004b02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e008      	b.n	8004b02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	461a      	mov	r2, r3
 8004b22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3b7      	bcc.n	8004aa6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e043      	b.n	8004bc4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b52:	d118      	bne.n	8004b86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e013      	b.n	8004b98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e008      	b.n	8004b98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3b7      	bcc.n	8004b3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <USB_DevInit+0x2c4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f043 0208 	orr.w	r2, r3, #8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c40:	b004      	add	sp, #16
 8004c42:	4770      	bx	lr
 8004c44:	803c3800 	.word	0x803c3800

08004c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a13      	ldr	r2, [pc, #76]	; (8004cac <USB_FlushTxFifo+0x64>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d901      	bls.n	8004c68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e01b      	b.n	8004ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	daf2      	bge.n	8004c56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	019b      	lsls	r3, r3, #6
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <USB_FlushTxFifo+0x64>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e006      	b.n	8004ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d0f0      	beq.n	8004c80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	00030d40 	.word	0x00030d40

08004cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <USB_FlushRxFifo+0x5c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e018      	b.n	8004d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	daf2      	bge.n	8004cbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <USB_FlushRxFifo+0x5c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e006      	b.n	8004d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d0f0      	beq.n	8004ce0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	00030d40 	.word	0x00030d40

08004d10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0306 	and.w	r3, r3, #6
 8004d5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]
 8004d66:	e00a      	b.n	8004d7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d002      	beq.n	8004d74 <USB_GetDevSpeed+0x32>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b06      	cmp	r3, #6
 8004d72:	d102      	bne.n	8004d7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d74:	2302      	movs	r3, #2
 8004d76:	75fb      	strb	r3, [r7, #23]
 8004d78:	e001      	b.n	8004d7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d7a:	230f      	movs	r3, #15
 8004d7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d13a      	bne.n	8004e1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d155      	bne.n	8004e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	059b      	lsls	r3, r3, #22
 8004e02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e04:	4313      	orrs	r3, r2
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e036      	b.n	8004e8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11a      	bne.n	8004e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	791b      	ldrb	r3, [r3, #4]
 8004e70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e72:	430b      	orrs	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d161      	bne.n	8004f7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ece:	d11f      	bne.n	8004f10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	2101      	movs	r1, #1
 8004f22:	fa01 f303 	lsl.w	r3, r1, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f30:	4013      	ands	r3, r2
 8004f32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f54:	4013      	ands	r3, r2
 8004f56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	0159      	lsls	r1, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	440b      	add	r3, r1
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	4619      	mov	r1, r3
 8004f74:	4b35      	ldr	r3, [pc, #212]	; (800504c <USB_DeactivateEndpoint+0x1b0>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
 8004f7a:	e060      	b.n	800503e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f92:	d11f      	bne.n	8004fd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	0151      	lsls	r1, r2, #5
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	43db      	mvns	r3, r3
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	43db      	mvns	r3, r3
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005018:	4013      	ands	r3, r2
 800501a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	0159      	lsls	r1, r3, #5
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	440b      	add	r3, r1
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	4619      	mov	r1, r3
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <USB_DeactivateEndpoint+0x1b4>)
 800503a:	4013      	ands	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	ec337800 	.word	0xec337800
 8005050:	eff37800 	.word	0xeff37800

08005054 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 815c 	bne.w	800532e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d132      	bne.n	80050e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005098:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800509c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	0cdb      	lsrs	r3, r3, #19
 80050de:	04db      	lsls	r3, r3, #19
 80050e0:	6113      	str	r3, [r2, #16]
 80050e2:	e074      	b.n	80051ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	0cdb      	lsrs	r3, r3, #19
 8005100:	04db      	lsls	r3, r3, #19
 8005102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005122:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6999      	ldr	r1, [r3, #24]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	440b      	add	r3, r1
 8005140:	1e59      	subs	r1, r3, #1
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	fbb1 f3f3 	udiv	r3, r1, r3
 800514a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800514c:	4b9d      	ldr	r3, [pc, #628]	; (80053c4 <USB_EPStartXfer+0x370>)
 800514e:	400b      	ands	r3, r1
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	0148      	lsls	r0, r1, #5
 8005154:	69f9      	ldr	r1, [r7, #28]
 8005156:	4401      	add	r1, r0
 8005158:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005176:	69b9      	ldr	r1, [r7, #24]
 8005178:	0148      	lsls	r0, r1, #5
 800517a:	69f9      	ldr	r1, [r7, #28]
 800517c:	4401      	add	r1, r0
 800517e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005182:	4313      	orrs	r3, r2
 8005184:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	791b      	ldrb	r3, [r3, #4]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11f      	bne.n	80051ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d14b      	bne.n	800526c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	791b      	ldrb	r3, [r3, #4]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d128      	bne.n	800524a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d110      	bne.n	800522a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e00f      	b.n	800524a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005248:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e133      	b.n	80054d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	440a      	add	r2, r1
 8005282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800528a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d015      	beq.n	80052c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 811b 	beq.w	80054d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	2101      	movs	r1, #1
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ba:	4313      	orrs	r3, r2
 80052bc:	634b      	str	r3, [r1, #52]	; 0x34
 80052be:	e109      	b.n	80054d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d110      	bne.n	80052f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e00f      	b.n	8005312 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005310:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6919      	ldr	r1, [r3, #16]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	b298      	uxth	r0, r3
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4603      	mov	r3, r0
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fade 	bl	80058e8 <USB_WritePacket>
 800532c:	e0d2      	b.n	80054d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005348:	0cdb      	lsrs	r3, r3, #19
 800534a:	04db      	lsls	r3, r3, #19
 800534c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800536c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005370:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d126      	bne.n	80053c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	0148      	lsls	r0, r1, #5
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	4401      	add	r1, r0
 8005398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800539c:	4313      	orrs	r3, r2
 800539e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053be:	6113      	str	r3, [r2, #16]
 80053c0:	e03a      	b.n	8005438 <USB_EPStartXfer+0x3e4>
 80053c2:	bf00      	nop
 80053c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	8afa      	ldrh	r2, [r7, #22]
 80053e4:	fb03 f202 	mul.w	r2, r3, r2
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	8afb      	ldrh	r3, [r7, #22]
 80053fc:	04d9      	lsls	r1, r3, #19
 80053fe:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <USB_EPStartXfer+0x48c>)
 8005400:	400b      	ands	r3, r1
 8005402:	69b9      	ldr	r1, [r7, #24]
 8005404:	0148      	lsls	r0, r1, #5
 8005406:	69f9      	ldr	r1, [r7, #28]
 8005408:	4401      	add	r1, r0
 800540a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800540e:	4313      	orrs	r3, r2
 8005410:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	0148      	lsls	r0, r1, #5
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	4401      	add	r1, r0
 8005430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005434:	4313      	orrs	r3, r2
 8005436:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d10d      	bne.n	800545a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6919      	ldr	r1, [r3, #16]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	460a      	mov	r2, r1
 8005458:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	791b      	ldrb	r3, [r3, #4]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d128      	bne.n	80054b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d110      	bne.n	8005494 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e00f      	b.n	80054b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	1ff80000 	.word	0x1ff80000

080054e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b01      	cmp	r3, #1
 8005502:	f040 80ce 	bne.w	80056a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d132      	bne.n	8005574 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800552c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556c:	0cdb      	lsrs	r3, r3, #19
 800556e:	04db      	lsls	r3, r3, #19
 8005570:	6113      	str	r3, [r2, #16]
 8005572:	e04e      	b.n	8005612 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	0cdb      	lsrs	r3, r3, #19
 8005590:	04db      	lsls	r3, r3, #19
 8005592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d903      	bls.n	80055cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005602:	6939      	ldr	r1, [r7, #16]
 8005604:	0148      	lsls	r0, r1, #5
 8005606:	6979      	ldr	r1, [r7, #20]
 8005608:	4401      	add	r1, r0
 800560a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800560e:	4313      	orrs	r3, r2
 8005610:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d11e      	bne.n	8005656 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	461a      	mov	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e097      	b.n	8005786 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005674:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8083 	beq.w	8005786 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	2101      	movs	r1, #1
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	6979      	ldr	r1, [r7, #20]
 8005698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800569c:	4313      	orrs	r3, r2
 800569e:	634b      	str	r3, [r1, #52]	; 0x34
 80056a0:	e071      	b.n	8005786 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	0cdb      	lsrs	r3, r3, #19
 80056be:	04db      	lsls	r3, r3, #19
 80056c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800571c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005734:	6939      	ldr	r1, [r7, #16]
 8005736:	0148      	lsls	r0, r1, #5
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	4401      	add	r1, r0
 800573c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10d      	bne.n	8005766 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6919      	ldr	r1, [r3, #16]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	460a      	mov	r2, r1
 8005764:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005784:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d14a      	bne.n	8005848 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ca:	f040 8086 	bne.w	80058da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005822:	4293      	cmp	r3, r2
 8005824:	d902      	bls.n	800582c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
          break;
 800582a:	e056      	b.n	80058da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005844:	d0e7      	beq.n	8005816 <USB_EPStopXfer+0x82>
 8005846:	e048      	b.n	80058da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800585c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005860:	d13b      	bne.n	80058da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005884:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d902      	bls.n	80058c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	75fb      	strb	r3, [r7, #23]
          break;
 80058be:	e00c      	b.n	80058da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d8:	d0e7      	beq.n	80058aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4611      	mov	r1, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	460b      	mov	r3, r1
 80058f8:	71fb      	strb	r3, [r7, #7]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d123      	bne.n	8005956 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800590e:	88bb      	ldrh	r3, [r7, #4]
 8005910:	3303      	adds	r3, #3
 8005912:	089b      	lsrs	r3, r3, #2
 8005914:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005916:	2300      	movs	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e018      	b.n	800594e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	031a      	lsls	r2, r3, #12
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005928:	461a      	mov	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	3301      	adds	r3, #1
 8005934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	3301      	adds	r3, #1
 8005940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	3301      	adds	r3, #1
 8005946:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	3301      	adds	r3, #1
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	429a      	cmp	r2, r3
 8005954:	d3e2      	bcc.n	800591c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3724      	adds	r7, #36	; 0x24
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005964:	b480      	push	{r7}
 8005966:	b08b      	sub	sp, #44	; 0x2c
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	b29b      	uxth	r3, r3
 8005980:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800598a:	2300      	movs	r3, #0
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	e014      	b.n	80059ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	601a      	str	r2, [r3, #0]
    pDest++;
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	3301      	adds	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	3301      	adds	r3, #1
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	3301      	adds	r3, #1
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	3301      	adds	r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	3301      	adds	r3, #1
 80059b8:	623b      	str	r3, [r7, #32]
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3e6      	bcc.n	8005990 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059c2:	8bfb      	ldrh	r3, [r7, #30]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01e      	beq.n	8005a06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d2:	461a      	mov	r2, r3
 80059d4:	f107 0310 	add.w	r3, r7, #16
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	701a      	strb	r2, [r3, #0]
      i++;
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	3301      	adds	r3, #1
 80059f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	3301      	adds	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059fa:	8bfb      	ldrh	r3, [r7, #30]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a00:	8bfb      	ldrh	r3, [r7, #30]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ea      	bne.n	80059dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	372c      	adds	r7, #44	; 0x2c
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d12c      	bne.n	8005a8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	db12      	blt.n	8005a68 <USB_EPSetStall+0x54>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00f      	beq.n	8005a68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e02b      	b.n	8005ae2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	db12      	blt.n	8005ac2 <USB_EPSetStall+0xae>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00f      	beq.n	8005ac2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ac0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d128      	bne.n	8005b5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	791b      	ldrb	r3, [r3, #4]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d003      	beq.n	8005b3c <USB_EPClearStall+0x4c>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	791b      	ldrb	r3, [r3, #4]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d138      	bne.n	8005bae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e027      	b.n	8005bae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	791b      	ldrb	r3, [r3, #4]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d003      	beq.n	8005b8e <USB_EPClearStall+0x9e>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	791b      	ldrb	r3, [r3, #4]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d10f      	bne.n	8005bae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005bf0:	68f9      	ldr	r1, [r7, #12]
 8005bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c36:	f023 0302 	bic.w	r3, r3, #2
 8005c3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c64:	f023 0303 	bic.w	r3, r3, #3
 8005c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	0c1b      	lsrs	r3, r3, #16
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4013      	ands	r3, r2
 8005d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	b29b      	uxth	r3, r3
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d48:	68bb      	ldr	r3, [r7, #8]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b087      	sub	sp, #28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	fa22 f303 	lsr.w	r3, r2, r3
 8005d86:	01db      	lsls	r3, r3, #7
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4013      	ands	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005da4:	68bb      	ldr	r3, [r7, #8]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	333c      	adds	r3, #60	; 0x3c
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4a26      	ldr	r2, [pc, #152]	; (8005ecc <USB_EP0_OutStart+0xb8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d90a      	bls.n	8005e4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e48:	d101      	bne.n	8005e4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e037      	b.n	8005ebe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	2300      	movs	r3, #0
 8005e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7c:	f043 0318 	orr.w	r3, r3, #24
 8005e80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d10f      	bne.n	8005ebc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005eba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	4f54300a 	.word	0x4f54300a

08005ed0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <USB_CoreReset+0x64>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e01b      	b.n	8005f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	daf2      	bge.n	8005edc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <USB_CoreReset+0x64>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d0f0      	beq.n	8005f06 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	00030d40 	.word	0x00030d40

08005f38 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005f44:	2010      	movs	r0, #16
 8005f46:	f003 fb2b 	bl	80095a0 <USBD_static_malloc>
 8005f4a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	32b0      	adds	r2, #176	; 0xb0
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f62:	2302      	movs	r3, #2
 8005f64:	e048      	b.n	8005ff8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	32b0      	adds	r2, #176	; 0xb0
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	32b0      	adds	r2, #176	; 0xb0
 8005f80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7c1b      	ldrb	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005f92:	4b1b      	ldr	r3, [pc, #108]	; (8006000 <USBD_HID_Init+0xc8>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f003 020f 	and.w	r2, r3, #15
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3326      	adds	r3, #38	; 0x26
 8005fa8:	2207      	movs	r2, #7
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e00c      	b.n	8005fc8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <USBD_HID_Init+0xc8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f003 020f 	and.w	r2, r3, #15
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3326      	adds	r3, #38	; 0x26
 8005fc4:	220a      	movs	r2, #10
 8005fc6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <USBD_HID_Init+0xc8>)
 8005fca:	7819      	ldrb	r1, [r3, #0]
 8005fcc:	2304      	movs	r3, #4
 8005fce:	2203      	movs	r2, #3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f003 f9d4 	bl	800937e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <USBD_HID_Init+0xc8>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f003 020f 	and.w	r2, r3, #15
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	3324      	adds	r3, #36	; 0x24
 8005fec:	2201      	movs	r2, #1
 8005fee:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200000ca 	.word	0x200000ca

08006004 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006010:	4b1f      	ldr	r3, [pc, #124]	; (8006090 <USBD_HID_DeInit+0x8c>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f003 f9d7 	bl	80093ca <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800601c:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <USBD_HID_DeInit+0x8c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 020f 	and.w	r2, r3, #15
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	3324      	adds	r3, #36	; 0x24
 8006032:	2200      	movs	r2, #0
 8006034:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006036:	4b16      	ldr	r3, [pc, #88]	; (8006090 <USBD_HID_DeInit+0x8c>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3326      	adds	r3, #38	; 0x26
 800604c:	2200      	movs	r2, #0
 800604e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32b0      	adds	r2, #176	; 0xb0
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d011      	beq.n	8006086 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	32b0      	adds	r2, #176	; 0xb0
 800606c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006070:	4618      	mov	r0, r3
 8006072:	f003 faa3 	bl	80095bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	32b0      	adds	r2, #176	; 0xb0
 8006080:	2100      	movs	r1, #0
 8006082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	200000ca 	.word	0x200000ca

08006094 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	32b0      	adds	r2, #176	; 0xb0
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	e0e8      	b.n	8006292 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d046      	beq.n	800615a <USBD_HID_Setup+0xc6>
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	f040 80d8 	bne.w	8006282 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	3b02      	subs	r3, #2
 80060d8:	2b09      	cmp	r3, #9
 80060da:	d836      	bhi.n	800614a <USBD_HID_Setup+0xb6>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <USBD_HID_Setup+0x50>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	0800613b 	.word	0x0800613b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800614b 	.word	0x0800614b
 80060f0:	0800614b 	.word	0x0800614b
 80060f4:	0800614b 	.word	0x0800614b
 80060f8:	0800614b 	.word	0x0800614b
 80060fc:	0800614b 	.word	0x0800614b
 8006100:	0800614b 	.word	0x0800614b
 8006104:	08006129 	.word	0x08006129
 8006108:	0800610d 	.word	0x0800610d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	885b      	ldrh	r3, [r3, #2]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]
          break;
 8006118:	e01e      	b.n	8006158 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 fba5 	bl	8007870 <USBD_CtlSendData>
          break;
 8006126:	e017      	b.n	8006158 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	885b      	ldrh	r3, [r3, #2]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	b29b      	uxth	r3, r3
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	605a      	str	r2, [r3, #4]
          break;
 8006138:	e00e      	b.n	8006158 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3304      	adds	r3, #4
 800613e:	2201      	movs	r2, #1
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fb94 	bl	8007870 <USBD_CtlSendData>
          break;
 8006148:	e006      	b.n	8006158 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fb1e 	bl	800778e <USBD_CtlError>
          ret = USBD_FAIL;
 8006152:	2303      	movs	r3, #3
 8006154:	75fb      	strb	r3, [r7, #23]
          break;
 8006156:	bf00      	nop
      }
      break;
 8006158:	e09a      	b.n	8006290 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	2b0b      	cmp	r3, #11
 8006160:	f200 8086 	bhi.w	8006270 <USBD_HID_Setup+0x1dc>
 8006164:	a201      	add	r2, pc, #4	; (adr r2, 800616c <USBD_HID_Setup+0xd8>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	0800619d 	.word	0x0800619d
 8006170:	0800627f 	.word	0x0800627f
 8006174:	08006271 	.word	0x08006271
 8006178:	08006271 	.word	0x08006271
 800617c:	08006271 	.word	0x08006271
 8006180:	08006271 	.word	0x08006271
 8006184:	080061c7 	.word	0x080061c7
 8006188:	08006271 	.word	0x08006271
 800618c:	08006271 	.word	0x08006271
 8006190:	08006271 	.word	0x08006271
 8006194:	0800621f 	.word	0x0800621f
 8006198:	08006249 	.word	0x08006249
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d107      	bne.n	80061b8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061a8:	f107 030a 	add.w	r3, r7, #10
 80061ac:	2202      	movs	r2, #2
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fb5d 	bl	8007870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061b6:	e063      	b.n	8006280 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fae7 	bl	800778e <USBD_CtlError>
            ret = USBD_FAIL;
 80061c0:	2303      	movs	r3, #3
 80061c2:	75fb      	strb	r3, [r7, #23]
          break;
 80061c4:	e05c      	b.n	8006280 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	885b      	ldrh	r3, [r3, #2]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b22      	cmp	r3, #34	; 0x22
 80061d0:	d108      	bne.n	80061e4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	88db      	ldrh	r3, [r3, #6]
 80061d6:	2b4a      	cmp	r3, #74	; 0x4a
 80061d8:	bf28      	it	cs
 80061da:	234a      	movcs	r3, #74	; 0x4a
 80061dc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80061de:	4b2f      	ldr	r3, [pc, #188]	; (800629c <USBD_HID_Setup+0x208>)
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e015      	b.n	8006210 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	885b      	ldrh	r3, [r3, #2]
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b21      	cmp	r3, #33	; 0x21
 80061ee:	d108      	bne.n	8006202 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80061f0:	4b2b      	ldr	r3, [pc, #172]	; (80062a0 <USBD_HID_Setup+0x20c>)
 80061f2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	88db      	ldrh	r3, [r3, #6]
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	bf28      	it	cs
 80061fc:	2309      	movcs	r3, #9
 80061fe:	82bb      	strh	r3, [r7, #20]
 8006200:	e006      	b.n	8006210 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 fac2 	bl	800778e <USBD_CtlError>
            ret = USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	75fb      	strb	r3, [r7, #23]
            break;
 800620e:	e037      	b.n	8006280 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006210:	8abb      	ldrh	r3, [r7, #20]
 8006212:	461a      	mov	r2, r3
 8006214:	6939      	ldr	r1, [r7, #16]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fb2a 	bl	8007870 <USBD_CtlSendData>
          break;
 800621c:	e030      	b.n	8006280 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b03      	cmp	r3, #3
 8006228:	d107      	bne.n	800623a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3308      	adds	r3, #8
 800622e:	2201      	movs	r2, #1
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fb1c 	bl	8007870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006238:	e022      	b.n	8006280 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 faa6 	bl	800778e <USBD_CtlError>
            ret = USBD_FAIL;
 8006242:	2303      	movs	r3, #3
 8006244:	75fb      	strb	r3, [r7, #23]
          break;
 8006246:	e01b      	b.n	8006280 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b03      	cmp	r3, #3
 8006252:	d106      	bne.n	8006262 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	885b      	ldrh	r3, [r3, #2]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006260:	e00e      	b.n	8006280 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fa92 	bl	800778e <USBD_CtlError>
            ret = USBD_FAIL;
 800626a:	2303      	movs	r3, #3
 800626c:	75fb      	strb	r3, [r7, #23]
          break;
 800626e:	e007      	b.n	8006280 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fa8b 	bl	800778e <USBD_CtlError>
          ret = USBD_FAIL;
 8006278:	2303      	movs	r3, #3
 800627a:	75fb      	strb	r3, [r7, #23]
          break;
 800627c:	e000      	b.n	8006280 <USBD_HID_Setup+0x1ec>
          break;
 800627e:	bf00      	nop
      }
      break;
 8006280:	e006      	b.n	8006290 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fa82 	bl	800778e <USBD_CtlError>
      ret = USBD_FAIL;
 800628a:	2303      	movs	r3, #3
 800628c:	75fb      	strb	r3, [r7, #23]
      break;
 800628e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000080 	.word	0x20000080
 80062a0:	20000068 	.word	0x20000068

080062a4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80062ac:	2181      	movs	r1, #129	; 0x81
 80062ae:	4809      	ldr	r0, [pc, #36]	; (80062d4 <USBD_HID_GetFSCfgDesc+0x30>)
 80062b0:	f000 fc35 	bl	8006b1e <USBD_GetEpDesc>
 80062b4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	220a      	movs	r2, #10
 80062c0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2222      	movs	r2, #34	; 0x22
 80062c6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80062c8:	4b02      	ldr	r3, [pc, #8]	; (80062d4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000044 	.word	0x20000044

080062d8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80062e0:	2181      	movs	r1, #129	; 0x81
 80062e2:	4809      	ldr	r0, [pc, #36]	; (8006308 <USBD_HID_GetHSCfgDesc+0x30>)
 80062e4:	f000 fc1b 	bl	8006b1e <USBD_GetEpDesc>
 80062e8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2207      	movs	r2, #7
 80062f4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2222      	movs	r2, #34	; 0x22
 80062fa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80062fc:	4b02      	ldr	r3, [pc, #8]	; (8006308 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000044 	.word	0x20000044

0800630c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006314:	2181      	movs	r1, #129	; 0x81
 8006316:	4809      	ldr	r0, [pc, #36]	; (800633c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006318:	f000 fc01 	bl	8006b1e <USBD_GetEpDesc>
 800631c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	220a      	movs	r2, #10
 8006328:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2222      	movs	r2, #34	; 0x22
 800632e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000044 	.word	0x20000044

08006340 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	32b0      	adds	r2, #176	; 0xb0
 8006356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635a:	2200      	movs	r2, #0
 800635c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	220a      	movs	r2, #10
 8006378:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800637a:	4b03      	ldr	r3, [pc, #12]	; (8006388 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	20000074 	.word	0x20000074

0800638c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e01f      	b.n	80063e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	79fa      	ldrb	r2, [r7, #7]
 80063d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f002 ff69 	bl	80092b0 <USBD_LL_Init>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006400:	2303      	movs	r3, #3
 8006402:	e025      	b.n	8006450 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	32ae      	adds	r2, #174	; 0xae
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00f      	beq.n	8006440 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	32ae      	adds	r2, #174	; 0xae
 800642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	f107 020e 	add.w	r2, r7, #14
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	4602      	mov	r2, r0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f002 ff71 	bl	8009348 <USBD_LL_Start>
 8006466:	4603      	mov	r3, r0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	4611      	mov	r1, r2
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4611      	mov	r1, r2
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f001 f908 	bl	800771a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2b02      	cmp	r3, #2
 800652c:	d01a      	beq.n	8006564 <USBD_LL_SetupStage+0x72>
 800652e:	2b02      	cmp	r3, #2
 8006530:	d822      	bhi.n	8006578 <USBD_LL_SetupStage+0x86>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <USBD_LL_SetupStage+0x4a>
 8006536:	2b01      	cmp	r3, #1
 8006538:	d00a      	beq.n	8006550 <USBD_LL_SetupStage+0x5e>
 800653a:	e01d      	b.n	8006578 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fb5f 	bl	8006c08 <USBD_StdDevReq>
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]
      break;
 800654e:	e020      	b.n	8006592 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fbc7 	bl	8006cec <USBD_StdItfReq>
 800655e:	4603      	mov	r3, r0
 8006560:	73fb      	strb	r3, [r7, #15]
      break;
 8006562:	e016      	b.n	8006592 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fc29 	bl	8006dc4 <USBD_StdEPReq>
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
      break;
 8006576:	e00c      	b.n	8006592 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800657e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f002 ff3e 	bl	8009408 <USBD_LL_StallEP>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
      break;
 8006590:	bf00      	nop
  }

  return ret;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	460b      	mov	r3, r1
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d16e      	bne.n	8006692 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	f040 8098 	bne.w	80066f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d913      	bls.n	80065fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	1ad2      	subs	r2, r2, r3
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	4293      	cmp	r3, r2
 80065ec:	bf28      	it	cs
 80065ee:	4613      	movcs	r3, r2
 80065f0:	461a      	mov	r2, r3
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 f967 	bl	80078c8 <USBD_CtlContinueRx>
 80065fa:	e07d      	b.n	80066f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	2b02      	cmp	r3, #2
 8006608:	d014      	beq.n	8006634 <USBD_LL_DataOutStage+0x98>
 800660a:	2b02      	cmp	r3, #2
 800660c:	d81d      	bhi.n	800664a <USBD_LL_DataOutStage+0xae>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <USBD_LL_DataOutStage+0x7c>
 8006612:	2b01      	cmp	r3, #1
 8006614:	d003      	beq.n	800661e <USBD_LL_DataOutStage+0x82>
 8006616:	e018      	b.n	800664a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	75bb      	strb	r3, [r7, #22]
            break;
 800661c:	e018      	b.n	8006650 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006624:	b2db      	uxtb	r3, r3
 8006626:	4619      	mov	r1, r3
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 fa5e 	bl	8006aea <USBD_CoreFindIF>
 800662e:	4603      	mov	r3, r0
 8006630:	75bb      	strb	r3, [r7, #22]
            break;
 8006632:	e00d      	b.n	8006650 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800663a:	b2db      	uxtb	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fa60 	bl	8006b04 <USBD_CoreFindEP>
 8006644:	4603      	mov	r3, r0
 8006646:	75bb      	strb	r3, [r7, #22]
            break;
 8006648:	e002      	b.n	8006650 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	75bb      	strb	r3, [r7, #22]
            break;
 800664e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006650:	7dbb      	ldrb	r3, [r7, #22]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d119      	bne.n	800668a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b03      	cmp	r3, #3
 8006660:	d113      	bne.n	800668a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006662:	7dba      	ldrb	r2, [r7, #22]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	32ae      	adds	r2, #174	; 0xae
 8006668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006672:	7dba      	ldrb	r2, [r7, #22]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800667a:	7dba      	ldrb	r2, [r7, #22]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	32ae      	adds	r2, #174	; 0xae
 8006680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 f92d 	bl	80078ea <USBD_CtlSendStatus>
 8006690:	e032      	b.n	80066f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	b2db      	uxtb	r3, r3
 800669a:	4619      	mov	r1, r3
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fa31 	bl	8006b04 <USBD_CoreFindEP>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066a6:	7dbb      	ldrb	r3, [r7, #22]
 80066a8:	2bff      	cmp	r3, #255	; 0xff
 80066aa:	d025      	beq.n	80066f8 <USBD_LL_DataOutStage+0x15c>
 80066ac:	7dbb      	ldrb	r3, [r7, #22]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d122      	bne.n	80066f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d117      	bne.n	80066ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80066be:	7dba      	ldrb	r2, [r7, #22]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	32ae      	adds	r2, #174	; 0xae
 80066c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00f      	beq.n	80066ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80066ce:	7dba      	ldrb	r2, [r7, #22]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066d6:	7dba      	ldrb	r2, [r7, #22]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	32ae      	adds	r2, #174	; 0xae
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	7afa      	ldrb	r2, [r7, #11]
 80066e4:	4611      	mov	r1, r2
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	4798      	blx	r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	e000      	b.n	80066fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b086      	sub	sp, #24
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	460b      	mov	r3, r1
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d16f      	bne.n	80067f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3314      	adds	r3, #20
 800671a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006722:	2b02      	cmp	r3, #2
 8006724:	d15a      	bne.n	80067dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	429a      	cmp	r2, r3
 8006730:	d914      	bls.n	800675c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	461a      	mov	r2, r3
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f001 f8ac 	bl	80078a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800674e:	2300      	movs	r3, #0
 8006750:	2200      	movs	r2, #0
 8006752:	2100      	movs	r1, #0
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f002 ff01 	bl	800955c <USBD_LL_PrepareReceive>
 800675a:	e03f      	b.n	80067dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	429a      	cmp	r2, r3
 8006766:	d11c      	bne.n	80067a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006770:	429a      	cmp	r2, r3
 8006772:	d316      	bcc.n	80067a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800677e:	429a      	cmp	r2, r3
 8006780:	d20f      	bcs.n	80067a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006782:	2200      	movs	r2, #0
 8006784:	2100      	movs	r1, #0
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f001 f88d 	bl	80078a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006794:	2300      	movs	r3, #0
 8006796:	2200      	movs	r2, #0
 8006798:	2100      	movs	r1, #0
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f002 fede 	bl	800955c <USBD_LL_PrepareReceive>
 80067a0:	e01c      	b.n	80067dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d10f      	bne.n	80067ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f002 fe19 	bl	8009408 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f001 f89a 	bl	8007910 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d03a      	beq.n	800685c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fe42 	bl	8006470 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067f4:	e032      	b.n	800685c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	4619      	mov	r1, r3
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f97f 	bl	8006b04 <USBD_CoreFindEP>
 8006806:	4603      	mov	r3, r0
 8006808:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	2bff      	cmp	r3, #255	; 0xff
 800680e:	d025      	beq.n	800685c <USBD_LL_DataInStage+0x15a>
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d122      	bne.n	800685c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b03      	cmp	r3, #3
 8006820:	d11c      	bne.n	800685c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006822:	7dfa      	ldrb	r2, [r7, #23]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	32ae      	adds	r2, #174	; 0xae
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d014      	beq.n	800685c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006832:	7dfa      	ldrb	r2, [r7, #23]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800683a:	7dfa      	ldrb	r2, [r7, #23]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	32ae      	adds	r2, #174	; 0xae
 8006840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	7afa      	ldrb	r2, [r7, #11]
 8006848:	4611      	mov	r1, r2
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	4798      	blx	r3
 800684e:	4603      	mov	r3, r0
 8006850:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006852:	7dbb      	ldrb	r3, [r7, #22]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006858:	7dbb      	ldrb	r3, [r7, #22]
 800685a:	e000      	b.n	800685e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d014      	beq.n	80068cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6852      	ldr	r2, [r2, #4]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	4611      	mov	r1, r2
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068cc:	2340      	movs	r3, #64	; 0x40
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f002 fd53 	bl	800937e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2240      	movs	r2, #64	; 0x40
 80068e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068e8:	2340      	movs	r3, #64	; 0x40
 80068ea:	2200      	movs	r2, #0
 80068ec:	2180      	movs	r1, #128	; 0x80
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f002 fd45 	bl	800937e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2240      	movs	r2, #64	; 0x40
 80068fe:	621a      	str	r2, [r3, #32]

  return ret;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	78fa      	ldrb	r2, [r7, #3]
 800691a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006938:	b2da      	uxtb	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b04      	cmp	r3, #4
 8006968:	d106      	bne.n	8006978 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006970:	b2da      	uxtb	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b03      	cmp	r3, #3
 8006998:	d110      	bne.n	80069bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	32ae      	adds	r2, #174	; 0xae
 80069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e01c      	b.n	8006a22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d115      	bne.n	8006a20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32ae      	adds	r2, #174	; 0xae
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	32ae      	adds	r2, #174	; 0xae
 8006a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	32ae      	adds	r2, #174	; 0xae
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e01c      	b.n	8006a86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d115      	bne.n	8006a84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32ae      	adds	r2, #174	; 0xae
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	32ae      	adds	r2, #174	; 0xae
 8006a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	4611      	mov	r1, r2
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00e      	beq.n	8006ae0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6852      	ldr	r2, [r2, #4]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006af6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b086      	sub	sp, #24
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d920      	bls.n	8006b88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b4e:	e013      	b.n	8006b78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b50:	f107 030a 	add.w	r3, r7, #10
 8006b54:	4619      	mov	r1, r3
 8006b56:	6978      	ldr	r0, [r7, #20]
 8006b58:	f000 f81b 	bl	8006b92 <USBD_GetNextDesc>
 8006b5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	d108      	bne.n	8006b78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	789b      	ldrb	r3, [r3, #2]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d008      	beq.n	8006b86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	885b      	ldrh	r3, [r3, #2]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d8e5      	bhi.n	8006b50 <USBD_GetEpDesc+0x32>
 8006b84:	e000      	b.n	8006b88 <USBD_GetEpDesc+0x6a>
          break;
 8006b86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b88:	693b      	ldr	r3, [r7, #16]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	881a      	ldrh	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4413      	add	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	3301      	adds	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bea:	8a3b      	ldrh	r3, [r7, #16]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	b21a      	sxth	r2, r3
 8006bf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b21b      	sxth	r3, r3
 8006bf8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bfa:	89fb      	ldrh	r3, [r7, #14]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d005      	beq.n	8006c2e <USBD_StdDevReq+0x26>
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d857      	bhi.n	8006cd6 <USBD_StdDevReq+0xce>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00f      	beq.n	8006c4a <USBD_StdDevReq+0x42>
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d153      	bne.n	8006cd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	32ae      	adds	r2, #174	; 0xae
 8006c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
      break;
 8006c48:	e04a      	b.n	8006ce0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	d83b      	bhi.n	8006cca <USBD_StdDevReq+0xc2>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <USBD_StdDevReq+0x50>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006cad 	.word	0x08006cad
 8006c5c:	08006cc1 	.word	0x08006cc1
 8006c60:	08006ccb 	.word	0x08006ccb
 8006c64:	08006cb7 	.word	0x08006cb7
 8006c68:	08006ccb 	.word	0x08006ccb
 8006c6c:	08006c8b 	.word	0x08006c8b
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006ccb 	.word	0x08006ccb
 8006c78:	08006ca3 	.word	0x08006ca3
 8006c7c:	08006c95 	.word	0x08006c95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fa3c 	bl	8007100 <USBD_GetDescriptor>
          break;
 8006c88:	e024      	b.n	8006cd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fba1 	bl	80073d4 <USBD_SetAddress>
          break;
 8006c92:	e01f      	b.n	8006cd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fbe0 	bl	800745c <USBD_SetConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
          break;
 8006ca0:	e018      	b.n	8006cd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc83 	bl	80075b0 <USBD_GetConfig>
          break;
 8006caa:	e013      	b.n	8006cd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fcb4 	bl	800761c <USBD_GetStatus>
          break;
 8006cb4:	e00e      	b.n	8006cd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fce3 	bl	8007684 <USBD_SetFeature>
          break;
 8006cbe:	e009      	b.n	8006cd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fd07 	bl	80076d6 <USBD_ClrFeature>
          break;
 8006cc8:	e004      	b.n	8006cd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fd5e 	bl	800778e <USBD_CtlError>
          break;
 8006cd2:	bf00      	nop
      }
      break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fd58 	bl	800778e <USBD_CtlError>
      break;
 8006cde:	bf00      	nop
  }

  return ret;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop

08006cec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d005      	beq.n	8006d12 <USBD_StdItfReq+0x26>
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d852      	bhi.n	8006db0 <USBD_StdItfReq+0xc4>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <USBD_StdItfReq+0x26>
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d14e      	bne.n	8006db0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d840      	bhi.n	8006da2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	889b      	ldrh	r3, [r3, #4]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d836      	bhi.n	8006d98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	889b      	ldrh	r3, [r3, #4]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fed9 	bl	8006aea <USBD_CoreFindIF>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2bff      	cmp	r3, #255	; 0xff
 8006d40:	d01d      	beq.n	8006d7e <USBD_StdItfReq+0x92>
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d11a      	bne.n	8006d7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d48:	7bba      	ldrb	r2, [r7, #14]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32ae      	adds	r2, #174	; 0xae
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00f      	beq.n	8006d78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d58:	7bba      	ldrb	r2, [r7, #14]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d60:	7bba      	ldrb	r2, [r7, #14]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32ae      	adds	r2, #174	; 0xae
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d76:	e004      	b.n	8006d82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d7c:	e001      	b.n	8006d82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d110      	bne.n	8006dac <USBD_StdItfReq+0xc0>
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10d      	bne.n	8006dac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fdaa 	bl	80078ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d96:	e009      	b.n	8006dac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fcf7 	bl	800778e <USBD_CtlError>
          break;
 8006da0:	e004      	b.n	8006dac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fcf2 	bl	800778e <USBD_CtlError>
          break;
 8006daa:	e000      	b.n	8006dae <USBD_StdItfReq+0xc2>
          break;
 8006dac:	bf00      	nop
      }
      break;
 8006dae:	e004      	b.n	8006dba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fceb 	bl	800778e <USBD_CtlError>
      break;
 8006db8:	bf00      	nop
  }

  return ret;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	889b      	ldrh	r3, [r3, #4]
 8006dd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d007      	beq.n	8006df4 <USBD_StdEPReq+0x30>
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	f200 817f 	bhi.w	80070e8 <USBD_StdEPReq+0x324>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d02a      	beq.n	8006e44 <USBD_StdEPReq+0x80>
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	f040 817a 	bne.w	80070e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fe83 	bl	8006b04 <USBD_CoreFindEP>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e02:	7b7b      	ldrb	r3, [r7, #13]
 8006e04:	2bff      	cmp	r3, #255	; 0xff
 8006e06:	f000 8174 	beq.w	80070f2 <USBD_StdEPReq+0x32e>
 8006e0a:	7b7b      	ldrb	r3, [r7, #13]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 8170 	bne.w	80070f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006e12:	7b7a      	ldrb	r2, [r7, #13]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e1a:	7b7a      	ldrb	r2, [r7, #13]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	32ae      	adds	r2, #174	; 0xae
 8006e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 8163 	beq.w	80070f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e2c:	7b7a      	ldrb	r2, [r7, #13]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32ae      	adds	r2, #174	; 0xae
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e42:	e156      	b.n	80070f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d008      	beq.n	8006e5e <USBD_StdEPReq+0x9a>
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	f300 8145 	bgt.w	80070dc <USBD_StdEPReq+0x318>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 809b 	beq.w	8006f8e <USBD_StdEPReq+0x1ca>
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d03c      	beq.n	8006ed6 <USBD_StdEPReq+0x112>
 8006e5c:	e13e      	b.n	80070dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d002      	beq.n	8006e70 <USBD_StdEPReq+0xac>
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d016      	beq.n	8006e9c <USBD_StdEPReq+0xd8>
 8006e6e:	e02c      	b.n	8006eca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00d      	beq.n	8006e92 <USBD_StdEPReq+0xce>
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d00a      	beq.n	8006e92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f002 fac1 	bl	8009408 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f002 fabd 	bl	8009408 <USBD_LL_StallEP>
 8006e8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e90:	e020      	b.n	8006ed4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fc7a 	bl	800778e <USBD_CtlError>
              break;
 8006e9a:	e01b      	b.n	8006ed4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	885b      	ldrh	r3, [r3, #2]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10e      	bne.n	8006ec2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <USBD_StdEPReq+0xfe>
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d008      	beq.n	8006ec2 <USBD_StdEPReq+0xfe>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	88db      	ldrh	r3, [r3, #6]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f002 faa3 	bl	8009408 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fd11 	bl	80078ea <USBD_CtlSendStatus>

              break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fc5e 	bl	800778e <USBD_CtlError>
              break;
 8006ed2:	bf00      	nop
          }
          break;
 8006ed4:	e107      	b.n	80070e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d002      	beq.n	8006ee8 <USBD_StdEPReq+0x124>
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d016      	beq.n	8006f14 <USBD_StdEPReq+0x150>
 8006ee6:	e04b      	b.n	8006f80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <USBD_StdEPReq+0x146>
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d00a      	beq.n	8006f0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f002 fa85 	bl	8009408 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f002 fa81 	bl	8009408 <USBD_LL_StallEP>
 8006f06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f08:	e040      	b.n	8006f8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fc3e 	bl	800778e <USBD_CtlError>
              break;
 8006f12:	e03b      	b.n	8006f8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d136      	bne.n	8006f8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f002 fa8b 	bl	8009446 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fcda 	bl	80078ea <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fde2 	bl	8006b04 <USBD_CoreFindEP>
 8006f40:	4603      	mov	r3, r0
 8006f42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f44:	7b7b      	ldrb	r3, [r7, #13]
 8006f46:	2bff      	cmp	r3, #255	; 0xff
 8006f48:	d01f      	beq.n	8006f8a <USBD_StdEPReq+0x1c6>
 8006f4a:	7b7b      	ldrb	r3, [r7, #13]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11c      	bne.n	8006f8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f50:	7b7a      	ldrb	r2, [r7, #13]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f58:	7b7a      	ldrb	r2, [r7, #13]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	32ae      	adds	r2, #174	; 0xae
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d010      	beq.n	8006f8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f68:	7b7a      	ldrb	r2, [r7, #13]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32ae      	adds	r2, #174	; 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f7e:	e004      	b.n	8006f8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fc03 	bl	800778e <USBD_CtlError>
              break;
 8006f88:	e000      	b.n	8006f8c <USBD_StdEPReq+0x1c8>
              break;
 8006f8a:	bf00      	nop
          }
          break;
 8006f8c:	e0ab      	b.n	80070e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d002      	beq.n	8006fa0 <USBD_StdEPReq+0x1dc>
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d032      	beq.n	8007004 <USBD_StdEPReq+0x240>
 8006f9e:	e097      	b.n	80070d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <USBD_StdEPReq+0x1f2>
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b80      	cmp	r3, #128	; 0x80
 8006faa:	d004      	beq.n	8006fb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fbed 	bl	800778e <USBD_CtlError>
                break;
 8006fb4:	e091      	b.n	80070da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da0b      	bge.n	8006fd6 <USBD_StdEPReq+0x212>
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	3310      	adds	r3, #16
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	e00b      	b.n	8006fee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	3304      	adds	r3, #4
 8006fee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fc37 	bl	8007870 <USBD_CtlSendData>
              break;
 8007002:	e06a      	b.n	80070da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	da11      	bge.n	8007030 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	f003 020f 	and.w	r2, r3, #15
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	3324      	adds	r3, #36	; 0x24
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d117      	bne.n	8007056 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fbb0 	bl	800778e <USBD_CtlError>
                  break;
 800702e:	e054      	b.n	80070da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	f003 020f 	and.w	r2, r3, #15
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d104      	bne.n	8007056 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fb9d 	bl	800778e <USBD_CtlError>
                  break;
 8007054:	e041      	b.n	80070da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800705a:	2b00      	cmp	r3, #0
 800705c:	da0b      	bge.n	8007076 <USBD_StdEPReq+0x2b2>
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	3310      	adds	r3, #16
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	3304      	adds	r3, #4
 8007074:	e00b      	b.n	800708e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	3304      	adds	r3, #4
 800708e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <USBD_StdEPReq+0x2d8>
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b80      	cmp	r3, #128	; 0x80
 800709a:	d103      	bne.n	80070a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e00e      	b.n	80070c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 f9eb 	bl	8009484 <USBD_LL_IsStallEP>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e002      	b.n	80070c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2202      	movs	r2, #2
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fbd1 	bl	8007870 <USBD_CtlSendData>
              break;
 80070ce:	e004      	b.n	80070da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb5b 	bl	800778e <USBD_CtlError>
              break;
 80070d8:	bf00      	nop
          }
          break;
 80070da:	e004      	b.n	80070e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fb55 	bl	800778e <USBD_CtlError>
          break;
 80070e4:	bf00      	nop
      }
      break;
 80070e6:	e005      	b.n	80070f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fb4f 	bl	800778e <USBD_CtlError>
      break;
 80070f0:	e000      	b.n	80070f4 <USBD_StdEPReq+0x330>
      break;
 80070f2:	bf00      	nop
  }

  return ret;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	2b06      	cmp	r3, #6
 8007122:	f200 8128 	bhi.w	8007376 <USBD_GetDescriptor+0x276>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBD_GetDescriptor+0x2c>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007149 	.word	0x08007149
 8007130:	08007161 	.word	0x08007161
 8007134:	080071a1 	.word	0x080071a1
 8007138:	08007377 	.word	0x08007377
 800713c:	08007377 	.word	0x08007377
 8007140:	08007317 	.word	0x08007317
 8007144:	08007343 	.word	0x08007343
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7c12      	ldrb	r2, [r2, #16]
 8007154:	f107 0108 	add.w	r1, r7, #8
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
      break;
 800715e:	e112      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7c1b      	ldrb	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10d      	bne.n	8007184 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f107 0208 	add.w	r2, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007182:	e100      	b.n	8007386 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	f107 0208 	add.w	r2, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	2202      	movs	r2, #2
 800719c:	701a      	strb	r2, [r3, #0]
      break;
 800719e:	e0f2      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	885b      	ldrh	r3, [r3, #2]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	f200 80ac 	bhi.w	8007304 <USBD_GetDescriptor+0x204>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <USBD_GetDescriptor+0xb4>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	08007201 	.word	0x08007201
 80071bc:	08007235 	.word	0x08007235
 80071c0:	08007269 	.word	0x08007269
 80071c4:	0800729d 	.word	0x0800729d
 80071c8:	080072d1 	.word	0x080072d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c12      	ldrb	r2, [r2, #16]
 80071e4:	f107 0108 	add.w	r1, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ee:	e091      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 facb 	bl	800778e <USBD_CtlError>
            err++;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	3301      	adds	r3, #1
 80071fc:	72fb      	strb	r3, [r7, #11]
          break;
 80071fe:	e089      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	7c12      	ldrb	r2, [r2, #16]
 8007218:	f107 0108 	add.w	r1, r7, #8
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007222:	e077      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fab1 	bl	800778e <USBD_CtlError>
            err++;
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	3301      	adds	r3, #1
 8007230:	72fb      	strb	r3, [r7, #11]
          break;
 8007232:	e06f      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7c12      	ldrb	r2, [r2, #16]
 800724c:	f107 0108 	add.w	r1, r7, #8
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007256:	e05d      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa97 	bl	800778e <USBD_CtlError>
            err++;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	3301      	adds	r3, #1
 8007264:	72fb      	strb	r3, [r7, #11]
          break;
 8007266:	e055      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	7c12      	ldrb	r2, [r2, #16]
 8007280:	f107 0108 	add.w	r1, r7, #8
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728a:	e043      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa7d 	bl	800778e <USBD_CtlError>
            err++;
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	3301      	adds	r3, #1
 8007298:	72fb      	strb	r3, [r7, #11]
          break;
 800729a:	e03b      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072be:	e029      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa63 	bl	800778e <USBD_CtlError>
            err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
          break;
 80072ce:	e021      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f2:	e00f      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa49 	bl	800778e <USBD_CtlError>
            err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
          break;
 8007302:	e007      	b.n	8007314 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fa41 	bl	800778e <USBD_CtlError>
          err++;
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	3301      	adds	r3, #1
 8007310:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007312:	bf00      	nop
      }
      break;
 8007314:	e037      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7c1b      	ldrb	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	f107 0208 	add.w	r2, r7, #8
 800732a:	4610      	mov	r0, r2
 800732c:	4798      	blx	r3
 800732e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007330:	e029      	b.n	8007386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa2a 	bl	800778e <USBD_CtlError>
        err++;
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	3301      	adds	r3, #1
 800733e:	72fb      	strb	r3, [r7, #11]
      break;
 8007340:	e021      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	7c1b      	ldrb	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10d      	bne.n	8007366 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	f107 0208 	add.w	r2, r7, #8
 8007356:	4610      	mov	r0, r2
 8007358:	4798      	blx	r3
 800735a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	2207      	movs	r2, #7
 8007362:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007364:	e00f      	b.n	8007386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa10 	bl	800778e <USBD_CtlError>
        err++;
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	3301      	adds	r3, #1
 8007372:	72fb      	strb	r3, [r7, #11]
      break;
 8007374:	e007      	b.n	8007386 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa08 	bl	800778e <USBD_CtlError>
      err++;
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	3301      	adds	r3, #1
 8007382:	72fb      	strb	r3, [r7, #11]
      break;
 8007384:	bf00      	nop
  }

  if (err != 0U)
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11e      	bne.n	80073ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	88db      	ldrh	r3, [r3, #6]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d016      	beq.n	80073c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007394:	893b      	ldrh	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00e      	beq.n	80073b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	88da      	ldrh	r2, [r3, #6]
 800739e:	893b      	ldrh	r3, [r7, #8]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bf28      	it	cs
 80073a4:	4613      	movcs	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073aa:	893b      	ldrh	r3, [r7, #8]
 80073ac:	461a      	mov	r2, r3
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fa5d 	bl	8007870 <USBD_CtlSendData>
 80073b6:	e009      	b.n	80073cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f9e7 	bl	800778e <USBD_CtlError>
 80073c0:	e004      	b.n	80073cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa91 	bl	80078ea <USBD_CtlSendStatus>
 80073c8:	e000      	b.n	80073cc <USBD_GetDescriptor+0x2cc>
    return;
 80073ca:	bf00      	nop
  }
}
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop

080073d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	889b      	ldrh	r3, [r3, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d131      	bne.n	800744a <USBD_SetAddress+0x76>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	88db      	ldrh	r3, [r3, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d12d      	bne.n	800744a <USBD_SetAddress+0x76>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	2b7f      	cmp	r3, #127	; 0x7f
 80073f4:	d829      	bhi.n	800744a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	885b      	ldrh	r3, [r3, #2]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007400:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b03      	cmp	r3, #3
 800740c:	d104      	bne.n	8007418 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9bc 	bl	800778e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	e01d      	b.n	8007454 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f002 f859 	bl	80094dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa5d 	bl	80078ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743e:	e009      	b.n	8007454 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	e004      	b.n	8007454 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f99e 	bl	800778e <USBD_CtlError>
  }
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	b2da      	uxtb	r2, r3
 8007470:	4b4e      	ldr	r3, [pc, #312]	; (80075ac <USBD_SetConfig+0x150>)
 8007472:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007474:	4b4d      	ldr	r3, [pc, #308]	; (80075ac <USBD_SetConfig+0x150>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d905      	bls.n	8007488 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f985 	bl	800778e <USBD_CtlError>
    return USBD_FAIL;
 8007484:	2303      	movs	r3, #3
 8007486:	e08c      	b.n	80075a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d002      	beq.n	800749a <USBD_SetConfig+0x3e>
 8007494:	2b03      	cmp	r3, #3
 8007496:	d029      	beq.n	80074ec <USBD_SetConfig+0x90>
 8007498:	e075      	b.n	8007586 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800749a:	4b44      	ldr	r3, [pc, #272]	; (80075ac <USBD_SetConfig+0x150>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d020      	beq.n	80074e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80074a2:	4b42      	ldr	r3, [pc, #264]	; (80075ac <USBD_SetConfig+0x150>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074ac:	4b3f      	ldr	r3, [pc, #252]	; (80075ac <USBD_SetConfig+0x150>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fe ffe7 	bl	8006486 <USBD_SetClassConfig>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d008      	beq.n	80074d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f962 	bl	800778e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074d2:	e065      	b.n	80075a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fa08 	bl	80078ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2203      	movs	r2, #3
 80074de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074e2:	e05d      	b.n	80075a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa00 	bl	80078ea <USBD_CtlSendStatus>
      break;
 80074ea:	e059      	b.n	80075a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074ec:	4b2f      	ldr	r3, [pc, #188]	; (80075ac <USBD_SetConfig+0x150>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d112      	bne.n	800751a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074fc:	4b2b      	ldr	r3, [pc, #172]	; (80075ac <USBD_SetConfig+0x150>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007506:	4b29      	ldr	r3, [pc, #164]	; (80075ac <USBD_SetConfig+0x150>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fe ffd6 	bl	80064be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9e9 	bl	80078ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007518:	e042      	b.n	80075a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800751a:	4b24      	ldr	r3, [pc, #144]	; (80075ac <USBD_SetConfig+0x150>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d02a      	beq.n	800757e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fe ffc4 	bl	80064be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007536:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <USBD_SetConfig+0x150>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007540:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <USBD_SetConfig+0x150>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fe ff9d 	bl	8006486 <USBD_SetClassConfig>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00f      	beq.n	8007576 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f918 	bl	800778e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fe ffa9 	bl	80064be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007574:	e014      	b.n	80075a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f9b7 	bl	80078ea <USBD_CtlSendStatus>
      break;
 800757c:	e010      	b.n	80075a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9b3 	bl	80078ea <USBD_CtlSendStatus>
      break;
 8007584:	e00c      	b.n	80075a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f900 	bl	800778e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <USBD_SetConfig+0x150>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7fe ff92 	bl	80064be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800759a:	2303      	movs	r3, #3
 800759c:	73fb      	strb	r3, [r7, #15]
      break;
 800759e:	bf00      	nop
  }

  return ret;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	200005b0 	.word	0x200005b0

080075b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	88db      	ldrh	r3, [r3, #6]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d004      	beq.n	80075cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f8e2 	bl	800778e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075ca:	e023      	b.n	8007614 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	dc02      	bgt.n	80075de <USBD_GetConfig+0x2e>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	dc03      	bgt.n	80075e4 <USBD_GetConfig+0x34>
 80075dc:	e015      	b.n	800760a <USBD_GetConfig+0x5a>
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d00b      	beq.n	80075fa <USBD_GetConfig+0x4a>
 80075e2:	e012      	b.n	800760a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3308      	adds	r3, #8
 80075ee:	2201      	movs	r2, #1
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f93c 	bl	8007870 <USBD_CtlSendData>
        break;
 80075f8:	e00c      	b.n	8007614 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3304      	adds	r3, #4
 80075fe:	2201      	movs	r2, #1
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f934 	bl	8007870 <USBD_CtlSendData>
        break;
 8007608:	e004      	b.n	8007614 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8be 	bl	800778e <USBD_CtlError>
        break;
 8007612:	bf00      	nop
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762c:	b2db      	uxtb	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	2b02      	cmp	r3, #2
 8007632:	d81e      	bhi.n	8007672 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	88db      	ldrh	r3, [r3, #6]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d004      	beq.n	8007646 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8a5 	bl	800778e <USBD_CtlError>
        break;
 8007644:	e01a      	b.n	800767c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f043 0202 	orr.w	r2, r3, #2
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	330c      	adds	r3, #12
 8007666:	2202      	movs	r2, #2
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f900 	bl	8007870 <USBD_CtlSendData>
      break;
 8007670:	e004      	b.n	800767c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f88a 	bl	800778e <USBD_CtlError>
      break;
 800767a:	bf00      	nop
  }
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	885b      	ldrh	r3, [r3, #2]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f923 	bl	80078ea <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80076a4:	e013      	b.n	80076ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	885b      	ldrh	r3, [r3, #2]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d10b      	bne.n	80076c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	889b      	ldrh	r3, [r3, #4]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f913 	bl	80078ea <USBD_CtlSendStatus>
}
 80076c4:	e003      	b.n	80076ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f860 	bl	800778e <USBD_CtlError>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d80b      	bhi.n	8007706 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d10c      	bne.n	8007710 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8f3 	bl	80078ea <USBD_CtlSendStatus>
      }
      break;
 8007704:	e004      	b.n	8007710 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f840 	bl	800778e <USBD_CtlError>
      break;
 800770e:	e000      	b.n	8007712 <USBD_ClrFeature+0x3c>
      break;
 8007710:	bf00      	nop
  }
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	781a      	ldrb	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff fa41 	bl	8006bcc <SWAPBYTE>
 800774a:	4603      	mov	r3, r0
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff fa34 	bl	8006bcc <SWAPBYTE>
 8007764:	4603      	mov	r3, r0
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff fa27 	bl	8006bcc <SWAPBYTE>
 800777e:	4603      	mov	r3, r0
 8007780:	461a      	mov	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	80da      	strh	r2, [r3, #6]
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007798:	2180      	movs	r1, #128	; 0x80
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fe34 	bl	8009408 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fe30 	bl	8009408 <USBD_LL_StallEP>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d036      	beq.n	8007834 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f000 f836 	bl	800783c <USBD_GetLen>
 80077d0:	4603      	mov	r3, r0
 80077d2:	3301      	adds	r3, #1
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4413      	add	r3, r2
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	3301      	adds	r3, #1
 80077ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4413      	add	r3, r2
 80077f6:	2203      	movs	r2, #3
 80077f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	3301      	adds	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007800:	e013      	b.n	800782a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	4413      	add	r3, r2
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3301      	adds	r3, #1
 8007812:	613b      	str	r3, [r7, #16]
    idx++;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	3301      	adds	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	4413      	add	r3, r2
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]
    idx++;
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	3301      	adds	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e7      	bne.n	8007802 <USBD_GetString+0x52>
 8007832:	e000      	b.n	8007836 <USBD_GetString+0x86>
    return;
 8007834:	bf00      	nop
  }
}
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800784c:	e005      	b.n	800785a <USBD_GetLen+0x1e>
  {
    len++;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	3301      	adds	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	3301      	adds	r3, #1
 8007858:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1f5      	bne.n	800784e <USBD_GetLen+0x12>
  }

  return len;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2202      	movs	r2, #2
 8007880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	2100      	movs	r1, #0
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f001 fe3f 	bl	800951a <USBD_LL_Transmit>

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	2100      	movs	r1, #0
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 fe2e 	bl	800951a <USBD_LL_Transmit>

  return USBD_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	2100      	movs	r1, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f001 fe3e 	bl	800955c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078fa:	2300      	movs	r3, #0
 80078fc:	2200      	movs	r2, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fe0a 	bl	800951a <USBD_LL_Transmit>

  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2205      	movs	r2, #5
 800791c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007920:	2300      	movs	r3, #0
 8007922:	2200      	movs	r2, #0
 8007924:	2100      	movs	r1, #0
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 fe18 	bl	800955c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	4603      	mov	r3, r0
 800793e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007940:	2300      	movs	r3, #0
 8007942:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007948:	2b84      	cmp	r3, #132	; 0x84
 800794a:	d005      	beq.n	8007958 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800794c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	3303      	adds	r3, #3
 8007956:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800796a:	f000 fadf 	bl	8007f2c <vTaskStartScheduler>
  
  return osOK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	bd80      	pop	{r7, pc}

08007974 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007976:	b089      	sub	sp, #36	; 0x24
 8007978:	af04      	add	r7, sp, #16
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d020      	beq.n	80079c8 <osThreadCreate+0x54>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01c      	beq.n	80079c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685c      	ldr	r4, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681d      	ldr	r5, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691e      	ldr	r6, [r3, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff ffc8 	bl	8007936 <makeFreeRtosPriority>
 80079a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079b0:	9202      	str	r2, [sp, #8]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	9100      	str	r1, [sp, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	4632      	mov	r2, r6
 80079ba:	4629      	mov	r1, r5
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 f8ed 	bl	8007b9c <xTaskCreateStatic>
 80079c2:	4603      	mov	r3, r0
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e01c      	b.n	8007a02 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685c      	ldr	r4, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079d4:	b29e      	uxth	r6, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff ffaa 	bl	8007936 <makeFreeRtosPriority>
 80079e2:	4602      	mov	r2, r0
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	9200      	str	r2, [sp, #0]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	4632      	mov	r2, r6
 80079f0:	4629      	mov	r1, r5
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 f92f 	bl	8007c56 <xTaskCreate>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d001      	beq.n	8007a02 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e000      	b.n	8007a04 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007a02:	68fb      	ldr	r3, [r7, #12]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <osDelay+0x16>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	e000      	b.n	8007a24 <osDelay+0x18>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fa4d 	bl	8007ec4 <vTaskDelay>
  
  return osOK;
 8007a2a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f103 0208 	add.w	r2, r3, #8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f103 0208 	add.w	r2, r3, #8
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f103 0208 	add.w	r2, r3, #8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
}
 8007aca:	bf00      	nop
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d103      	bne.n	8007af6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e00c      	b.n	8007b10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3308      	adds	r3, #8
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	e002      	b.n	8007b04 <vListInsert+0x2e>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d2f6      	bcs.n	8007afe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	601a      	str	r2, [r3, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6892      	ldr	r2, [r2, #8]
 8007b5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6852      	ldr	r2, [r2, #4]
 8007b68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d103      	bne.n	8007b7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	1e5a      	subs	r2, r3, #1
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	; 0x38
 8007ba0:	af04      	add	r7, sp, #16
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <xTaskCreateStatic+0x46>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	61fb      	str	r3, [r7, #28]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007be2:	2354      	movs	r3, #84	; 0x54
 8007be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b54      	cmp	r3, #84	; 0x54
 8007bea:	d00a      	beq.n	8007c02 <xTaskCreateStatic+0x66>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	61bb      	str	r3, [r7, #24]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01e      	beq.n	8007c48 <xTaskCreateStatic+0xac>
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01b      	beq.n	8007c48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c22:	2300      	movs	r3, #0
 8007c24:	9303      	str	r3, [sp, #12]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	9302      	str	r3, [sp, #8]
 8007c2a:	f107 0314 	add.w	r3, r7, #20
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f850 	bl	8007ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c42:	f000 f8d5 	bl	8007df0 <prvAddNewTaskToReadyList>
 8007c46:	e001      	b.n	8007c4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c4c:	697b      	ldr	r3, [r7, #20]
	}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3728      	adds	r7, #40	; 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b08c      	sub	sp, #48	; 0x30
 8007c5a:	af04      	add	r7, sp, #16
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fec4 	bl	80089f8 <pvPortMalloc>
 8007c70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c78:	2054      	movs	r0, #84	; 0x54
 8007c7a:	f000 febd 	bl	80089f8 <pvPortMalloc>
 8007c7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c8c:	e005      	b.n	8007c9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c8e:	6978      	ldr	r0, [r7, #20]
 8007c90:	f000 ff7e 	bl	8008b90 <vPortFree>
 8007c94:	e001      	b.n	8007c9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d017      	beq.n	8007cd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	2300      	movs	r3, #0
 8007cac:	9303      	str	r3, [sp, #12]
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	9302      	str	r3, [sp, #8]
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f80e 	bl	8007ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cc4:	69f8      	ldr	r0, [r7, #28]
 8007cc6:	f000 f893 	bl	8007df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e002      	b.n	8007cd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
	}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f023 0307 	bic.w	r3, r3, #7
 8007d06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	617b      	str	r3, [r7, #20]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01f      	beq.n	8007d6e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	e012      	b.n	8007d5a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	7819      	ldrb	r1, [r3, #0]
 8007d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	4413      	add	r3, r2
 8007d42:	3334      	adds	r3, #52	; 0x34
 8007d44:	460a      	mov	r2, r1
 8007d46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	3301      	adds	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	2b0f      	cmp	r3, #15
 8007d5e:	d9e9      	bls.n	8007d34 <prvInitialiseNewTask+0x54>
 8007d60:	e000      	b.n	8007d64 <prvInitialiseNewTask+0x84>
			{
				break;
 8007d62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d6c:	e003      	b.n	8007d76 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	2b06      	cmp	r3, #6
 8007d7a:	d901      	bls.n	8007d80 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d7c:	2306      	movs	r3, #6
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2200      	movs	r2, #0
 8007d90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	3304      	adds	r3, #4
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fe6c 	bl	8007a74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	3318      	adds	r3, #24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fe67 	bl	8007a74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007daa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	f1c3 0207 	rsb	r2, r3, #7
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	68f9      	ldr	r1, [r7, #12]
 8007dce:	69b8      	ldr	r0, [r7, #24]
 8007dd0:	f000 fc06 	bl	80085e0 <pxPortInitialiseStack>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de6:	bf00      	nop
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007df8:	f000 fd1c 	bl	8008834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dfc:	4b2a      	ldr	r3, [pc, #168]	; (8007ea8 <prvAddNewTaskToReadyList+0xb8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	4a29      	ldr	r2, [pc, #164]	; (8007ea8 <prvAddNewTaskToReadyList+0xb8>)
 8007e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e06:	4b29      	ldr	r3, [pc, #164]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e0e:	4a27      	ldr	r2, [pc, #156]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e14:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <prvAddNewTaskToReadyList+0xb8>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d110      	bne.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e1c:	f000 fabc 	bl	8008398 <prvInitialiseTaskLists>
 8007e20:	e00d      	b.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e22:	4b23      	ldr	r3, [pc, #140]	; (8007eb0 <prvAddNewTaskToReadyList+0xc0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e2a:	4b20      	ldr	r3, [pc, #128]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d802      	bhi.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e38:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e3e:	4b1d      	ldr	r3, [pc, #116]	; (8007eb4 <prvAddNewTaskToReadyList+0xc4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <prvAddNewTaskToReadyList+0xc4>)
 8007e46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	409a      	lsls	r2, r3
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <prvAddNewTaskToReadyList+0xc8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <prvAddNewTaskToReadyList+0xc8>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <prvAddNewTaskToReadyList+0xcc>)
 8007e68:	441a      	add	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f7ff fe0c 	bl	8007a8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e76:	f000 fd0d 	bl	8008894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <prvAddNewTaskToReadyList+0xc0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e82:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d207      	bcs.n	8007ea0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <prvAddNewTaskToReadyList+0xd0>)
 8007e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	200006b4 	.word	0x200006b4
 8007eac:	200005b4 	.word	0x200005b4
 8007eb0:	200006c0 	.word	0x200006c0
 8007eb4:	200006d0 	.word	0x200006d0
 8007eb8:	200006bc 	.word	0x200006bc
 8007ebc:	200005b8 	.word	0x200005b8
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d017      	beq.n	8007f06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <vTaskDelay+0x60>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <vTaskDelay+0x30>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60bb      	str	r3, [r7, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ef4:	f000 f87a 	bl	8007fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ef8:	2100      	movs	r1, #0
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fb0a 	bl	8008514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f00:	f000 f882 	bl	8008008 <xTaskResumeAll>
 8007f04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d107      	bne.n	8007f1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <vTaskDelay+0x64>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	200006dc 	.word	0x200006dc
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	; 0x28
 8007f30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f3a:	463a      	mov	r2, r7
 8007f3c:	1d39      	adds	r1, r7, #4
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f8 face 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	9202      	str	r2, [sp, #8]
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	2300      	movs	r3, #0
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	2300      	movs	r3, #0
 8007f58:	460a      	mov	r2, r1
 8007f5a:	491e      	ldr	r1, [pc, #120]	; (8007fd4 <vTaskStartScheduler+0xa8>)
 8007f5c:	481e      	ldr	r0, [pc, #120]	; (8007fd8 <vTaskStartScheduler+0xac>)
 8007f5e:	f7ff fe1d 	bl	8007b9c <xTaskCreateStatic>
 8007f62:	4603      	mov	r3, r0
 8007f64:	4a1d      	ldr	r2, [pc, #116]	; (8007fdc <vTaskStartScheduler+0xb0>)
 8007f66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f68:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <vTaskStartScheduler+0xb0>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f70:	2301      	movs	r3, #1
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	e001      	b.n	8007f7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d116      	bne.n	8007fae <vTaskStartScheduler+0x82>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	613b      	str	r3, [r7, #16]
}
 8007f92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f94:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <vTaskStartScheduler+0xb4>)
 8007f96:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f9c:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <vTaskStartScheduler+0xb8>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <vTaskStartScheduler+0xbc>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fa8:	f000 fba2 	bl	80086f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fac:	e00e      	b.n	8007fcc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb4:	d10a      	bne.n	8007fcc <vTaskStartScheduler+0xa0>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60fb      	str	r3, [r7, #12]
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <vTaskStartScheduler+0x9e>
}
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	080096c0 	.word	0x080096c0
 8007fd8:	08008369 	.word	0x08008369
 8007fdc:	200006d8 	.word	0x200006d8
 8007fe0:	200006d4 	.word	0x200006d4
 8007fe4:	200006c0 	.word	0x200006c0
 8007fe8:	200006b8 	.word	0x200006b8

08007fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <vTaskSuspendAll+0x18>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	4a03      	ldr	r2, [pc, #12]	; (8008004 <vTaskSuspendAll+0x18>)
 8007ff8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ffa:	bf00      	nop
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	200006dc 	.word	0x200006dc

08008008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008016:	4b41      	ldr	r3, [pc, #260]	; (800811c <xTaskResumeAll+0x114>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <xTaskResumeAll+0x2c>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	603b      	str	r3, [r7, #0]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008034:	f000 fbfe 	bl	8008834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008038:	4b38      	ldr	r3, [pc, #224]	; (800811c <xTaskResumeAll+0x114>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	4a37      	ldr	r2, [pc, #220]	; (800811c <xTaskResumeAll+0x114>)
 8008040:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008042:	4b36      	ldr	r3, [pc, #216]	; (800811c <xTaskResumeAll+0x114>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d161      	bne.n	800810e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800804a:	4b35      	ldr	r3, [pc, #212]	; (8008120 <xTaskResumeAll+0x118>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d05d      	beq.n	800810e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008052:	e02e      	b.n	80080b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008054:	4b33      	ldr	r3, [pc, #204]	; (8008124 <xTaskResumeAll+0x11c>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3318      	adds	r3, #24
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fd71 	bl	8007b48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3304      	adds	r3, #4
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff fd6c 	bl	8007b48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	2201      	movs	r2, #1
 8008076:	409a      	lsls	r2, r3
 8008078:	4b2b      	ldr	r3, [pc, #172]	; (8008128 <xTaskResumeAll+0x120>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4313      	orrs	r3, r2
 800807e:	4a2a      	ldr	r2, [pc, #168]	; (8008128 <xTaskResumeAll+0x120>)
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4a27      	ldr	r2, [pc, #156]	; (800812c <xTaskResumeAll+0x124>)
 8008090:	441a      	add	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3304      	adds	r3, #4
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f7ff fcf8 	bl	8007a8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	4b23      	ldr	r3, [pc, #140]	; (8008130 <xTaskResumeAll+0x128>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d302      	bcc.n	80080b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80080ac:	4b21      	ldr	r3, [pc, #132]	; (8008134 <xTaskResumeAll+0x12c>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <xTaskResumeAll+0x11c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1cc      	bne.n	8008054 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080c0:	f000 fa08 	bl	80084d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080c4:	4b1c      	ldr	r3, [pc, #112]	; (8008138 <xTaskResumeAll+0x130>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d010      	beq.n	80080f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080d0:	f000 f836 	bl	8008140 <xTaskIncrementTick>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80080da:	4b16      	ldr	r3, [pc, #88]	; (8008134 <xTaskResumeAll+0x12c>)
 80080dc:	2201      	movs	r2, #1
 80080de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1f1      	bne.n	80080d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80080ec:	4b12      	ldr	r3, [pc, #72]	; (8008138 <xTaskResumeAll+0x130>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080f2:	4b10      	ldr	r3, [pc, #64]	; (8008134 <xTaskResumeAll+0x12c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <xTaskResumeAll+0x134>)
 8008100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800810e:	f000 fbc1 	bl	8008894 <vPortExitCritical>

	return xAlreadyYielded;
 8008112:	68bb      	ldr	r3, [r7, #8]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	200006dc 	.word	0x200006dc
 8008120:	200006b4 	.word	0x200006b4
 8008124:	20000674 	.word	0x20000674
 8008128:	200006bc 	.word	0x200006bc
 800812c:	200005b8 	.word	0x200005b8
 8008130:	200005b4 	.word	0x200005b4
 8008134:	200006c8 	.word	0x200006c8
 8008138:	200006c4 	.word	0x200006c4
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800814a:	4b4e      	ldr	r3, [pc, #312]	; (8008284 <xTaskIncrementTick+0x144>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f040 808e 	bne.w	8008270 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008154:	4b4c      	ldr	r3, [pc, #304]	; (8008288 <xTaskIncrementTick+0x148>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3301      	adds	r3, #1
 800815a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800815c:	4a4a      	ldr	r2, [pc, #296]	; (8008288 <xTaskIncrementTick+0x148>)
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d120      	bne.n	80081aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008168:	4b48      	ldr	r3, [pc, #288]	; (800828c <xTaskIncrementTick+0x14c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <xTaskIncrementTick+0x48>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	603b      	str	r3, [r7, #0]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <xTaskIncrementTick+0x46>
 8008188:	4b40      	ldr	r3, [pc, #256]	; (800828c <xTaskIncrementTick+0x14c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	4b40      	ldr	r3, [pc, #256]	; (8008290 <xTaskIncrementTick+0x150>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a3e      	ldr	r2, [pc, #248]	; (800828c <xTaskIncrementTick+0x14c>)
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	4a3e      	ldr	r2, [pc, #248]	; (8008290 <xTaskIncrementTick+0x150>)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	4b3d      	ldr	r3, [pc, #244]	; (8008294 <xTaskIncrementTick+0x154>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3301      	adds	r3, #1
 80081a2:	4a3c      	ldr	r2, [pc, #240]	; (8008294 <xTaskIncrementTick+0x154>)
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	f000 f995 	bl	80084d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081aa:	4b3b      	ldr	r3, [pc, #236]	; (8008298 <xTaskIncrementTick+0x158>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d348      	bcc.n	8008246 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081b4:	4b35      	ldr	r3, [pc, #212]	; (800828c <xTaskIncrementTick+0x14c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d104      	bne.n	80081c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081be:	4b36      	ldr	r3, [pc, #216]	; (8008298 <xTaskIncrementTick+0x158>)
 80081c0:	f04f 32ff 	mov.w	r2, #4294967295
 80081c4:	601a      	str	r2, [r3, #0]
					break;
 80081c6:	e03e      	b.n	8008246 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c8:	4b30      	ldr	r3, [pc, #192]	; (800828c <xTaskIncrementTick+0x14c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d203      	bcs.n	80081e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081e0:	4a2d      	ldr	r2, [pc, #180]	; (8008298 <xTaskIncrementTick+0x158>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081e6:	e02e      	b.n	8008246 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fcab 	bl	8007b48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d004      	beq.n	8008204 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	3318      	adds	r3, #24
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fca2 	bl	8007b48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	2201      	movs	r2, #1
 800820a:	409a      	lsls	r2, r3
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <xTaskIncrementTick+0x15c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4313      	orrs	r3, r2
 8008212:	4a22      	ldr	r2, [pc, #136]	; (800829c <xTaskIncrementTick+0x15c>)
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <xTaskIncrementTick+0x160>)
 8008224:	441a      	add	r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7ff fc2e 	bl	8007a8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008236:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <xTaskIncrementTick+0x164>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	429a      	cmp	r2, r3
 800823e:	d3b9      	bcc.n	80081b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008244:	e7b6      	b.n	80081b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008246:	4b17      	ldr	r3, [pc, #92]	; (80082a4 <xTaskIncrementTick+0x164>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4914      	ldr	r1, [pc, #80]	; (80082a0 <xTaskIncrementTick+0x160>)
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d901      	bls.n	8008262 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800825e:	2301      	movs	r3, #1
 8008260:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008262:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <xTaskIncrementTick+0x168>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800826a:	2301      	movs	r3, #1
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e004      	b.n	800827a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008270:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <xTaskIncrementTick+0x16c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	4a0d      	ldr	r2, [pc, #52]	; (80082ac <xTaskIncrementTick+0x16c>)
 8008278:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800827a:	697b      	ldr	r3, [r7, #20]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	200006dc 	.word	0x200006dc
 8008288:	200006b8 	.word	0x200006b8
 800828c:	2000066c 	.word	0x2000066c
 8008290:	20000670 	.word	0x20000670
 8008294:	200006cc 	.word	0x200006cc
 8008298:	200006d4 	.word	0x200006d4
 800829c:	200006bc 	.word	0x200006bc
 80082a0:	200005b8 	.word	0x200005b8
 80082a4:	200005b4 	.word	0x200005b4
 80082a8:	200006c8 	.word	0x200006c8
 80082ac:	200006c4 	.word	0x200006c4

080082b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082b6:	4b27      	ldr	r3, [pc, #156]	; (8008354 <vTaskSwitchContext+0xa4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082be:	4b26      	ldr	r3, [pc, #152]	; (8008358 <vTaskSwitchContext+0xa8>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082c4:	e03f      	b.n	8008346 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80082c6:	4b24      	ldr	r3, [pc, #144]	; (8008358 <vTaskSwitchContext+0xa8>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082cc:	4b23      	ldr	r3, [pc, #140]	; (800835c <vTaskSwitchContext+0xac>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	fab3 f383 	clz	r3, r3
 80082d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	f1c3 031f 	rsb	r3, r3, #31
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	491f      	ldr	r1, [pc, #124]	; (8008360 <vTaskSwitchContext+0xb0>)
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <vTaskSwitchContext+0x5c>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	607b      	str	r3, [r7, #4]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <vTaskSwitchContext+0x5a>
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4a12      	ldr	r2, [pc, #72]	; (8008360 <vTaskSwitchContext+0xb0>)
 8008318:	4413      	add	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	3308      	adds	r3, #8
 800832e:	429a      	cmp	r2, r3
 8008330:	d104      	bne.n	800833c <vTaskSwitchContext+0x8c>
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	605a      	str	r2, [r3, #4]
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	4a08      	ldr	r2, [pc, #32]	; (8008364 <vTaskSwitchContext+0xb4>)
 8008344:	6013      	str	r3, [r2, #0]
}
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	200006dc 	.word	0x200006dc
 8008358:	200006c8 	.word	0x200006c8
 800835c:	200006bc 	.word	0x200006bc
 8008360:	200005b8 	.word	0x200005b8
 8008364:	200005b4 	.word	0x200005b4

08008368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008370:	f000 f852 	bl	8008418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008374:	4b06      	ldr	r3, [pc, #24]	; (8008390 <prvIdleTask+0x28>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d9f9      	bls.n	8008370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <prvIdleTask+0x2c>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800838c:	e7f0      	b.n	8008370 <prvIdleTask+0x8>
 800838e:	bf00      	nop
 8008390:	200005b8 	.word	0x200005b8
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800839e:	2300      	movs	r3, #0
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	e00c      	b.n	80083be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4a12      	ldr	r2, [pc, #72]	; (80083f8 <prvInitialiseTaskLists+0x60>)
 80083b0:	4413      	add	r3, r2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff fb3e 	bl	8007a34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3301      	adds	r3, #1
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b06      	cmp	r3, #6
 80083c2:	d9ef      	bls.n	80083a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083c4:	480d      	ldr	r0, [pc, #52]	; (80083fc <prvInitialiseTaskLists+0x64>)
 80083c6:	f7ff fb35 	bl	8007a34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083ca:	480d      	ldr	r0, [pc, #52]	; (8008400 <prvInitialiseTaskLists+0x68>)
 80083cc:	f7ff fb32 	bl	8007a34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083d0:	480c      	ldr	r0, [pc, #48]	; (8008404 <prvInitialiseTaskLists+0x6c>)
 80083d2:	f7ff fb2f 	bl	8007a34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083d6:	480c      	ldr	r0, [pc, #48]	; (8008408 <prvInitialiseTaskLists+0x70>)
 80083d8:	f7ff fb2c 	bl	8007a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083dc:	480b      	ldr	r0, [pc, #44]	; (800840c <prvInitialiseTaskLists+0x74>)
 80083de:	f7ff fb29 	bl	8007a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083e2:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <prvInitialiseTaskLists+0x78>)
 80083e4:	4a05      	ldr	r2, [pc, #20]	; (80083fc <prvInitialiseTaskLists+0x64>)
 80083e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <prvInitialiseTaskLists+0x7c>)
 80083ea:	4a05      	ldr	r2, [pc, #20]	; (8008400 <prvInitialiseTaskLists+0x68>)
 80083ec:	601a      	str	r2, [r3, #0]
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	200005b8 	.word	0x200005b8
 80083fc:	20000644 	.word	0x20000644
 8008400:	20000658 	.word	0x20000658
 8008404:	20000674 	.word	0x20000674
 8008408:	20000688 	.word	0x20000688
 800840c:	200006a0 	.word	0x200006a0
 8008410:	2000066c 	.word	0x2000066c
 8008414:	20000670 	.word	0x20000670

08008418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800841e:	e019      	b.n	8008454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008420:	f000 fa08 	bl	8008834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008424:	4b10      	ldr	r3, [pc, #64]	; (8008468 <prvCheckTasksWaitingTermination+0x50>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fb89 	bl	8007b48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <prvCheckTasksWaitingTermination+0x54>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3b01      	subs	r3, #1
 800843c:	4a0b      	ldr	r2, [pc, #44]	; (800846c <prvCheckTasksWaitingTermination+0x54>)
 800843e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <prvCheckTasksWaitingTermination+0x58>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3b01      	subs	r3, #1
 8008446:	4a0a      	ldr	r2, [pc, #40]	; (8008470 <prvCheckTasksWaitingTermination+0x58>)
 8008448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800844a:	f000 fa23 	bl	8008894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f810 	bl	8008474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008454:	4b06      	ldr	r3, [pc, #24]	; (8008470 <prvCheckTasksWaitingTermination+0x58>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e1      	bne.n	8008420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000688 	.word	0x20000688
 800846c:	200006b4 	.word	0x200006b4
 8008470:	2000069c 	.word	0x2000069c

08008474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008482:	2b00      	cmp	r3, #0
 8008484:	d108      	bne.n	8008498 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fb80 	bl	8008b90 <vPortFree>
				vPortFree( pxTCB );
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fb7d 	bl	8008b90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008496:	e018      	b.n	80084ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d103      	bne.n	80084aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb74 	bl	8008b90 <vPortFree>
	}
 80084a8:	e00f      	b.n	80084ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d00a      	beq.n	80084ca <prvDeleteTCB+0x56>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60fb      	str	r3, [r7, #12]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <prvDeleteTCB+0x54>
	}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <prvResetNextTaskUnblockTime+0x38>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084e4:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <prvResetNextTaskUnblockTime+0x3c>)
 80084e6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084ec:	e008      	b.n	8008500 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ee:	4b07      	ldr	r3, [pc, #28]	; (800850c <prvResetNextTaskUnblockTime+0x38>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	4a04      	ldr	r2, [pc, #16]	; (8008510 <prvResetNextTaskUnblockTime+0x3c>)
 80084fe:	6013      	str	r3, [r2, #0]
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	2000066c 	.word	0x2000066c
 8008510:	200006d4 	.word	0x200006d4

08008514 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800851e:	4b29      	ldr	r3, [pc, #164]	; (80085c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008524:	4b28      	ldr	r3, [pc, #160]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3304      	adds	r3, #4
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fb0c 	bl	8007b48 <uxListRemove>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10b      	bne.n	800854e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008536:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	2201      	movs	r2, #1
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	43da      	mvns	r2, r3
 8008544:	4b21      	ldr	r3, [pc, #132]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4013      	ands	r3, r2
 800854a:	4a20      	ldr	r2, [pc, #128]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800854c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d10a      	bne.n	800856c <prvAddCurrentTaskToDelayedList+0x58>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800855c:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3304      	adds	r3, #4
 8008562:	4619      	mov	r1, r3
 8008564:	481a      	ldr	r0, [pc, #104]	; (80085d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008566:	f7ff fa92 	bl	8007a8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800856a:	e026      	b.n	80085ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008574:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	429a      	cmp	r2, r3
 8008582:	d209      	bcs.n	8008598 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008584:	4b13      	ldr	r3, [pc, #76]	; (80085d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3304      	adds	r3, #4
 800858e:	4619      	mov	r1, r3
 8008590:	4610      	mov	r0, r2
 8008592:	f7ff faa0 	bl	8007ad6 <vListInsert>
}
 8008596:	e010      	b.n	80085ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008598:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f7ff fa96 	bl	8007ad6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085aa:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d202      	bcs.n	80085ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085b4:	4a09      	ldr	r2, [pc, #36]	; (80085dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6013      	str	r3, [r2, #0]
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	200006b8 	.word	0x200006b8
 80085c8:	200005b4 	.word	0x200005b4
 80085cc:	200006bc 	.word	0x200006bc
 80085d0:	200006a0 	.word	0x200006a0
 80085d4:	20000670 	.word	0x20000670
 80085d8:	2000066c 	.word	0x2000066c
 80085dc:	200006d4 	.word	0x200006d4

080085e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3b04      	subs	r3, #4
 80085f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3b04      	subs	r3, #4
 80085fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f023 0201 	bic.w	r2, r3, #1
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3b04      	subs	r3, #4
 800860e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008610:	4a0c      	ldr	r2, [pc, #48]	; (8008644 <pxPortInitialiseStack+0x64>)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3b14      	subs	r3, #20
 800861a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3b04      	subs	r3, #4
 8008626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f06f 0202 	mvn.w	r2, #2
 800862e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3b20      	subs	r3, #32
 8008634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008636:	68fb      	ldr	r3, [r7, #12]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	08008649 	.word	0x08008649

08008648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <prvTaskExitError+0x54>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d00a      	beq.n	8008672 <prvTaskExitError+0x2a>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	60fb      	str	r3, [r7, #12]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <prvTaskExitError+0x28>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	60bb      	str	r3, [r7, #8]
}
 8008684:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008686:	bf00      	nop
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0fc      	beq.n	8008688 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800868e:	bf00      	nop
 8008690:	bf00      	nop
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	200000cc 	.word	0x200000cc

080086a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <pxCurrentTCBConst2>)
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6808      	ldr	r0, [r1, #0]
 80086a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	f380 8809 	msr	PSP, r0
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f04f 0000 	mov.w	r0, #0
 80086b6:	f380 8811 	msr	BASEPRI, r0
 80086ba:	4770      	bx	lr
 80086bc:	f3af 8000 	nop.w

080086c0 <pxCurrentTCBConst2>:
 80086c0:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop

080086c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086c8:	4808      	ldr	r0, [pc, #32]	; (80086ec <prvPortStartFirstTask+0x24>)
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	6800      	ldr	r0, [r0, #0]
 80086ce:	f380 8808 	msr	MSP, r0
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f380 8814 	msr	CONTROL, r0
 80086da:	b662      	cpsie	i
 80086dc:	b661      	cpsie	f
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	df00      	svc	0
 80086e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086ea:	bf00      	nop
 80086ec:	e000ed08 	.word	0xe000ed08

080086f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086f6:	4b46      	ldr	r3, [pc, #280]	; (8008810 <xPortStartScheduler+0x120>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a46      	ldr	r2, [pc, #280]	; (8008814 <xPortStartScheduler+0x124>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d10a      	bne.n	8008716 <xPortStartScheduler+0x26>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	613b      	str	r3, [r7, #16]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008716:	4b3e      	ldr	r3, [pc, #248]	; (8008810 <xPortStartScheduler+0x120>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a3f      	ldr	r2, [pc, #252]	; (8008818 <xPortStartScheduler+0x128>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d10a      	bne.n	8008736 <xPortStartScheduler+0x46>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60fb      	str	r3, [r7, #12]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008736:	4b39      	ldr	r3, [pc, #228]	; (800881c <xPortStartScheduler+0x12c>)
 8008738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	22ff      	movs	r2, #255	; 0xff
 8008746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008758:	b2da      	uxtb	r2, r3
 800875a:	4b31      	ldr	r3, [pc, #196]	; (8008820 <xPortStartScheduler+0x130>)
 800875c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800875e:	4b31      	ldr	r3, [pc, #196]	; (8008824 <xPortStartScheduler+0x134>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008764:	e009      	b.n	800877a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008766:	4b2f      	ldr	r3, [pc, #188]	; (8008824 <xPortStartScheduler+0x134>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3b01      	subs	r3, #1
 800876c:	4a2d      	ldr	r2, [pc, #180]	; (8008824 <xPortStartScheduler+0x134>)
 800876e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	b2db      	uxtb	r3, r3
 8008778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d0ef      	beq.n	8008766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008786:	4b27      	ldr	r3, [pc, #156]	; (8008824 <xPortStartScheduler+0x134>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f1c3 0307 	rsb	r3, r3, #7
 800878e:	2b04      	cmp	r3, #4
 8008790:	d00a      	beq.n	80087a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	60bb      	str	r3, [r7, #8]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087a8:	4b1e      	ldr	r3, [pc, #120]	; (8008824 <xPortStartScheduler+0x134>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	4a1d      	ldr	r2, [pc, #116]	; (8008824 <xPortStartScheduler+0x134>)
 80087b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087b2:	4b1c      	ldr	r3, [pc, #112]	; (8008824 <xPortStartScheduler+0x134>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087ba:	4a1a      	ldr	r2, [pc, #104]	; (8008824 <xPortStartScheduler+0x134>)
 80087bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087c6:	4b18      	ldr	r3, [pc, #96]	; (8008828 <xPortStartScheduler+0x138>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <xPortStartScheduler+0x138>)
 80087cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087d2:	4b15      	ldr	r3, [pc, #84]	; (8008828 <xPortStartScheduler+0x138>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a14      	ldr	r2, [pc, #80]	; (8008828 <xPortStartScheduler+0x138>)
 80087d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087de:	f000 f8dd 	bl	800899c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087e2:	4b12      	ldr	r3, [pc, #72]	; (800882c <xPortStartScheduler+0x13c>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087e8:	f000 f8fc 	bl	80089e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087ec:	4b10      	ldr	r3, [pc, #64]	; (8008830 <xPortStartScheduler+0x140>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a0f      	ldr	r2, [pc, #60]	; (8008830 <xPortStartScheduler+0x140>)
 80087f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087f8:	f7ff ff66 	bl	80086c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087fc:	f7ff fd58 	bl	80082b0 <vTaskSwitchContext>
	prvTaskExitError();
 8008800:	f7ff ff22 	bl	8008648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	e000ed00 	.word	0xe000ed00
 8008814:	410fc271 	.word	0x410fc271
 8008818:	410fc270 	.word	0x410fc270
 800881c:	e000e400 	.word	0xe000e400
 8008820:	200006e0 	.word	0x200006e0
 8008824:	200006e4 	.word	0x200006e4
 8008828:	e000ed20 	.word	0xe000ed20
 800882c:	200000cc 	.word	0x200000cc
 8008830:	e000ef34 	.word	0xe000ef34

08008834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	607b      	str	r3, [r7, #4]
}
 800884c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <vPortEnterCritical+0x58>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a0d      	ldr	r2, [pc, #52]	; (800888c <vPortEnterCritical+0x58>)
 8008856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008858:	4b0c      	ldr	r3, [pc, #48]	; (800888c <vPortEnterCritical+0x58>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d10f      	bne.n	8008880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <vPortEnterCritical+0x5c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <vPortEnterCritical+0x4c>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	603b      	str	r3, [r7, #0]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <vPortEnterCritical+0x4a>
	}
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	200000cc 	.word	0x200000cc
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800889a:	4b12      	ldr	r3, [pc, #72]	; (80088e4 <vPortExitCritical+0x50>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <vPortExitCritical+0x24>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	607b      	str	r3, [r7, #4]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <vPortExitCritical+0x50>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3b01      	subs	r3, #1
 80088be:	4a09      	ldr	r2, [pc, #36]	; (80088e4 <vPortExitCritical+0x50>)
 80088c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088c2:	4b08      	ldr	r3, [pc, #32]	; (80088e4 <vPortExitCritical+0x50>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <vPortExitCritical+0x42>
 80088ca:	2300      	movs	r3, #0
 80088cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088d6:	bf00      	nop
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	200000cc 	.word	0x200000cc
	...

080088f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088f0:	f3ef 8009 	mrs	r0, PSP
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	4b15      	ldr	r3, [pc, #84]	; (8008950 <pxCurrentTCBConst>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	f01e 0f10 	tst.w	lr, #16
 8008900:	bf08      	it	eq
 8008902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	6010      	str	r0, [r2, #0]
 800890c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008914:	f380 8811 	msr	BASEPRI, r0
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f7ff fcc6 	bl	80082b0 <vTaskSwitchContext>
 8008924:	f04f 0000 	mov.w	r0, #0
 8008928:	f380 8811 	msr	BASEPRI, r0
 800892c:	bc09      	pop	{r0, r3}
 800892e:	6819      	ldr	r1, [r3, #0]
 8008930:	6808      	ldr	r0, [r1, #0]
 8008932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008936:	f01e 0f10 	tst.w	lr, #16
 800893a:	bf08      	it	eq
 800893c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008940:	f380 8809 	msr	PSP, r0
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	f3af 8000 	nop.w

08008950 <pxCurrentTCBConst>:
 8008950:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop

08008958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	607b      	str	r3, [r7, #4]
}
 8008970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008972:	f7ff fbe5 	bl	8008140 <xTaskIncrementTick>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <SysTick_Handler+0x40>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f383 8811 	msr	BASEPRI, r3
}
 800898e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <vPortSetupTimerInterrupt+0x34>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089a6:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <vPortSetupTimerInterrupt+0x38>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <vPortSetupTimerInterrupt+0x3c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <vPortSetupTimerInterrupt+0x40>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	099b      	lsrs	r3, r3, #6
 80089b8:	4a09      	ldr	r2, [pc, #36]	; (80089e0 <vPortSetupTimerInterrupt+0x44>)
 80089ba:	3b01      	subs	r3, #1
 80089bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089be:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <vPortSetupTimerInterrupt+0x34>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	601a      	str	r2, [r3, #0]
}
 80089c4:	bf00      	nop
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	e000e010 	.word	0xe000e010
 80089d4:	e000e018 	.word	0xe000e018
 80089d8:	20000000 	.word	0x20000000
 80089dc:	10624dd3 	.word	0x10624dd3
 80089e0:	e000e014 	.word	0xe000e014

080089e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089f4 <vPortEnableVFP+0x10>
 80089e8:	6801      	ldr	r1, [r0, #0]
 80089ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089ee:	6001      	str	r1, [r0, #0]
 80089f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089f2:	bf00      	nop
 80089f4:	e000ed88 	.word	0xe000ed88

080089f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08a      	sub	sp, #40	; 0x28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a04:	f7ff faf2 	bl	8007fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a08:	4b5b      	ldr	r3, [pc, #364]	; (8008b78 <pvPortMalloc+0x180>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a10:	f000 f920 	bl	8008c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a14:	4b59      	ldr	r3, [pc, #356]	; (8008b7c <pvPortMalloc+0x184>)
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 8093 	bne.w	8008b48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01d      	beq.n	8008a64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a28:	2208      	movs	r2, #8
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d014      	beq.n	8008a64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f023 0307 	bic.w	r3, r3, #7
 8008a40:	3308      	adds	r3, #8
 8008a42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <pvPortMalloc+0x6c>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	617b      	str	r3, [r7, #20]
}
 8008a60:	bf00      	nop
 8008a62:	e7fe      	b.n	8008a62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d06e      	beq.n	8008b48 <pvPortMalloc+0x150>
 8008a6a:	4b45      	ldr	r3, [pc, #276]	; (8008b80 <pvPortMalloc+0x188>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d869      	bhi.n	8008b48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a74:	4b43      	ldr	r3, [pc, #268]	; (8008b84 <pvPortMalloc+0x18c>)
 8008a76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a78:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <pvPortMalloc+0x18c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a7e:	e004      	b.n	8008a8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d903      	bls.n	8008a9c <pvPortMalloc+0xa4>
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f1      	bne.n	8008a80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a9c:	4b36      	ldr	r3, [pc, #216]	; (8008b78 <pvPortMalloc+0x180>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d050      	beq.n	8008b48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2208      	movs	r2, #8
 8008aac:	4413      	add	r3, r2
 8008aae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d91f      	bls.n	8008b08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <pvPortMalloc+0xf8>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	613b      	str	r3, [r7, #16]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b02:	69b8      	ldr	r0, [r7, #24]
 8008b04:	f000 f908 	bl	8008d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b08:	4b1d      	ldr	r3, [pc, #116]	; (8008b80 <pvPortMalloc+0x188>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <pvPortMalloc+0x188>)
 8008b14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b16:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <pvPortMalloc+0x188>)
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <pvPortMalloc+0x190>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d203      	bcs.n	8008b2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b22:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <pvPortMalloc+0x188>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a18      	ldr	r2, [pc, #96]	; (8008b88 <pvPortMalloc+0x190>)
 8008b28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <pvPortMalloc+0x184>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	431a      	orrs	r2, r3
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b3e:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <pvPortMalloc+0x194>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	4a11      	ldr	r2, [pc, #68]	; (8008b8c <pvPortMalloc+0x194>)
 8008b46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b48:	f7ff fa5e 	bl	8008008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <pvPortMalloc+0x174>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	60fb      	str	r3, [r7, #12]
}
 8008b68:	bf00      	nop
 8008b6a:	e7fe      	b.n	8008b6a <pvPortMalloc+0x172>
	return pvReturn;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3728      	adds	r7, #40	; 0x28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	200042f0 	.word	0x200042f0
 8008b7c:	20004304 	.word	0x20004304
 8008b80:	200042f4 	.word	0x200042f4
 8008b84:	200042e8 	.word	0x200042e8
 8008b88:	200042f8 	.word	0x200042f8
 8008b8c:	200042fc 	.word	0x200042fc

08008b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d04d      	beq.n	8008c3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ba2:	2308      	movs	r3, #8
 8008ba4:	425b      	negs	r3, r3
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	4b24      	ldr	r3, [pc, #144]	; (8008c48 <vPortFree+0xb8>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <vPortFree+0x44>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60fb      	str	r3, [r7, #12]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <vPortFree+0x62>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	60bb      	str	r3, [r7, #8]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <vPortFree+0xb8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01e      	beq.n	8008c3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d11a      	bne.n	8008c3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <vPortFree+0xb8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	43db      	mvns	r3, r3
 8008c12:	401a      	ands	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c18:	f7ff f9e8 	bl	8007fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <vPortFree+0xbc>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4413      	add	r3, r2
 8008c26:	4a09      	ldr	r2, [pc, #36]	; (8008c4c <vPortFree+0xbc>)
 8008c28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c2a:	6938      	ldr	r0, [r7, #16]
 8008c2c:	f000 f874 	bl	8008d18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c30:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <vPortFree+0xc0>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3301      	adds	r3, #1
 8008c36:	4a06      	ldr	r2, [pc, #24]	; (8008c50 <vPortFree+0xc0>)
 8008c38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c3a:	f7ff f9e5 	bl	8008008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c3e:	bf00      	nop
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20004304 	.word	0x20004304
 8008c4c:	200042f4 	.word	0x200042f4
 8008c50:	20004300 	.word	0x20004300

08008c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c60:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <prvHeapInit+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3307      	adds	r3, #7
 8008c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <prvHeapInit+0xac>)
 8008c84:	4413      	add	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c8c:	4a1d      	ldr	r2, [pc, #116]	; (8008d04 <prvHeapInit+0xb0>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c92:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <prvHeapInit+0xb0>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0307 	bic.w	r3, r3, #7
 8008cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a15      	ldr	r2, [pc, #84]	; (8008d08 <prvHeapInit+0xb4>)
 8008cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <prvHeapInit+0xb4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <prvHeapInit+0xb4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cd4:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvHeapInit+0xb4>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <prvHeapInit+0xb8>)
 8008ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <prvHeapInit+0xbc>)
 8008cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cec:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <prvHeapInit+0xc0>)
 8008cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	200006e8 	.word	0x200006e8
 8008d04:	200042e8 	.word	0x200042e8
 8008d08:	200042f0 	.word	0x200042f0
 8008d0c:	200042f8 	.word	0x200042f8
 8008d10:	200042f4 	.word	0x200042f4
 8008d14:	20004304 	.word	0x20004304

08008d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d20:	4b28      	ldr	r3, [pc, #160]	; (8008dc4 <prvInsertBlockIntoFreeList+0xac>)
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	e002      	b.n	8008d2c <prvInsertBlockIntoFreeList+0x14>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d8f7      	bhi.n	8008d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d108      	bne.n	8008d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	441a      	add	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	441a      	add	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d118      	bne.n	8008da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d00d      	beq.n	8008d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	441a      	add	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e008      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	e003      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d002      	beq.n	8008db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	200042e8 	.word	0x200042e8
 8008dc8:	200042f0 	.word	0x200042f0

08008dcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	490e      	ldr	r1, [pc, #56]	; (8008e0c <MX_USB_DEVICE_Init+0x40>)
 8008dd4:	480e      	ldr	r0, [pc, #56]	; (8008e10 <MX_USB_DEVICE_Init+0x44>)
 8008dd6:	f7fd fad9 	bl	800638c <USBD_Init>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008de0:	f7f7 fd72 	bl	80008c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008de4:	490b      	ldr	r1, [pc, #44]	; (8008e14 <MX_USB_DEVICE_Init+0x48>)
 8008de6:	480a      	ldr	r0, [pc, #40]	; (8008e10 <MX_USB_DEVICE_Init+0x44>)
 8008de8:	f7fd fb00 	bl	80063ec <USBD_RegisterClass>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008df2:	f7f7 fd69 	bl	80008c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008df6:	4806      	ldr	r0, [pc, #24]	; (8008e10 <MX_USB_DEVICE_Init+0x44>)
 8008df8:	f7fd fb2e 	bl	8006458 <USBD_Start>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008e02:	f7f7 fd61 	bl	80008c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e06:	bf00      	nop
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	200000d0 	.word	0x200000d0
 8008e10:	20004308 	.word	0x20004308
 8008e14:	2000000c 	.word	0x2000000c

08008e18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2212      	movs	r2, #18
 8008e28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e2a:	4b03      	ldr	r3, [pc, #12]	; (8008e38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	200000ec 	.word	0x200000ec

08008e3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e4e:	4b03      	ldr	r3, [pc, #12]	; (8008e5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20000100 	.word	0x20000100

08008e60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	4907      	ldr	r1, [pc, #28]	; (8008e94 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e76:	4808      	ldr	r0, [pc, #32]	; (8008e98 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e78:	f7fe fc9a 	bl	80077b0 <USBD_GetString>
 8008e7c:	e004      	b.n	8008e88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4904      	ldr	r1, [pc, #16]	; (8008e94 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e82:	4805      	ldr	r0, [pc, #20]	; (8008e98 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e84:	f7fe fc94 	bl	80077b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e88:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	200045e4 	.word	0x200045e4
 8008e98:	080096c8 	.word	0x080096c8

08008e9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	4904      	ldr	r1, [pc, #16]	; (8008ebc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008eac:	4804      	ldr	r0, [pc, #16]	; (8008ec0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008eae:	f7fe fc7f 	bl	80077b0 <USBD_GetString>
  return USBD_StrDesc;
 8008eb2:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200045e4 	.word	0x200045e4
 8008ec0:	080096e0 	.word	0x080096e0

08008ec4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	6039      	str	r1, [r7, #0]
 8008ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	221a      	movs	r2, #26
 8008ed4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ed6:	f000 f843 	bl	8008f60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008eda:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000104 	.word	0x20000104

08008ee8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d105      	bne.n	8008f06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	4907      	ldr	r1, [pc, #28]	; (8008f1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008efe:	4808      	ldr	r0, [pc, #32]	; (8008f20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f00:	f7fe fc56 	bl	80077b0 <USBD_GetString>
 8008f04:	e004      	b.n	8008f10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	4904      	ldr	r1, [pc, #16]	; (8008f1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f0a:	4805      	ldr	r0, [pc, #20]	; (8008f20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f0c:	f7fe fc50 	bl	80077b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f10:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200045e4 	.word	0x200045e4
 8008f20:	080096f4 	.word	0x080096f4

08008f24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	4907      	ldr	r1, [pc, #28]	; (8008f58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f3a:	4808      	ldr	r0, [pc, #32]	; (8008f5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f3c:	f7fe fc38 	bl	80077b0 <USBD_GetString>
 8008f40:	e004      	b.n	8008f4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4904      	ldr	r1, [pc, #16]	; (8008f58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f48:	f7fe fc32 	bl	80077b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	200045e4 	.word	0x200045e4
 8008f5c:	08009700 	.word	0x08009700

08008f60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <Get_SerialNum+0x44>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <Get_SerialNum+0x48>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f72:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <Get_SerialNum+0x4c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d009      	beq.n	8008f9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f86:	2208      	movs	r2, #8
 8008f88:	4909      	ldr	r1, [pc, #36]	; (8008fb0 <Get_SerialNum+0x50>)
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 f814 	bl	8008fb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f90:	2204      	movs	r2, #4
 8008f92:	4908      	ldr	r1, [pc, #32]	; (8008fb4 <Get_SerialNum+0x54>)
 8008f94:	68b8      	ldr	r0, [r7, #8]
 8008f96:	f000 f80f 	bl	8008fb8 <IntToUnicode>
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	1fff7a10 	.word	0x1fff7a10
 8008fa8:	1fff7a14 	.word	0x1fff7a14
 8008fac:	1fff7a18 	.word	0x1fff7a18
 8008fb0:	20000106 	.word	0x20000106
 8008fb4:	20000116 	.word	0x20000116

08008fb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75fb      	strb	r3, [r7, #23]
 8008fce:	e027      	b.n	8009020 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	0f1b      	lsrs	r3, r3, #28
 8008fd4:	2b09      	cmp	r3, #9
 8008fd6:	d80b      	bhi.n	8008ff0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	0f1b      	lsrs	r3, r3, #28
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	440b      	add	r3, r1
 8008fe8:	3230      	adds	r2, #48	; 0x30
 8008fea:	b2d2      	uxtb	r2, r2
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	e00a      	b.n	8009006 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	0f1b      	lsrs	r3, r3, #28
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	440b      	add	r3, r1
 8009000:	3237      	adds	r2, #55	; 0x37
 8009002:	b2d2      	uxtb	r2, r2
 8009004:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	3301      	adds	r3, #1
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	4413      	add	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	3301      	adds	r3, #1
 800901e:	75fb      	strb	r3, [r7, #23]
 8009020:	7dfa      	ldrb	r2, [r7, #23]
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	429a      	cmp	r2, r3
 8009026:	d3d3      	bcc.n	8008fd0 <IntToUnicode+0x18>
  }
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	371c      	adds	r7, #28
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
	...

08009038 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08a      	sub	sp, #40	; 0x28
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009040:	f107 0314 	add.w	r3, r7, #20
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	605a      	str	r2, [r3, #4]
 800904a:	609a      	str	r2, [r3, #8]
 800904c:	60da      	str	r2, [r3, #12]
 800904e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009058:	d13a      	bne.n	80090d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800905a:	2300      	movs	r3, #0
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 8009060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009062:	4a1d      	ldr	r2, [pc, #116]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	6313      	str	r3, [r2, #48]	; 0x30
 800906a:	4b1b      	ldr	r3, [pc, #108]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009076:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800907a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800907c:	2302      	movs	r3, #2
 800907e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009080:	2300      	movs	r3, #0
 8009082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009084:	2303      	movs	r3, #3
 8009086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009088:	230a      	movs	r3, #10
 800908a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800908c:	f107 0314 	add.w	r3, r7, #20
 8009090:	4619      	mov	r1, r3
 8009092:	4812      	ldr	r0, [pc, #72]	; (80090dc <HAL_PCD_MspInit+0xa4>)
 8009094:	f7f8 f874 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009098:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	4a0e      	ldr	r2, [pc, #56]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 800909e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a2:	6353      	str	r3, [r2, #52]	; 0x34
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 80090aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ac:	4a0a      	ldr	r2, [pc, #40]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 80090ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090b2:	6453      	str	r3, [r2, #68]	; 0x44
 80090b4:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <HAL_PCD_MspInit+0xa0>)
 80090b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80090c0:	2200      	movs	r2, #0
 80090c2:	2105      	movs	r1, #5
 80090c4:	2043      	movs	r0, #67	; 0x43
 80090c6:	f7f8 f831 	bl	800112c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090ca:	2043      	movs	r0, #67	; 0x43
 80090cc:	f7f8 f84a 	bl	8001164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090d0:	bf00      	nop
 80090d2:	3728      	adds	r7, #40	; 0x28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40023800 	.word	0x40023800
 80090dc:	40020000 	.word	0x40020000

080090e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f7fd f9fb 	bl	80064f2 <USBD_LL_SetupStage>
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	6879      	ldr	r1, [r7, #4]
 800911a:	4613      	mov	r3, r2
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	440b      	add	r3, r1
 8009124:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	78fb      	ldrb	r3, [r7, #3]
 800912c:	4619      	mov	r1, r3
 800912e:	f7fd fa35 	bl	800659c <USBD_LL_DataOutStage>
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	334c      	adds	r3, #76	; 0x4c
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	4619      	mov	r1, r3
 8009162:	f7fd face 	bl	8006702 <USBD_LL_DataInStage>
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800917c:	4618      	mov	r0, r3
 800917e:	f7fd fc02 	bl	8006986 <USBD_LL_SOF>
}
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009192:	2301      	movs	r3, #1
 8009194:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d001      	beq.n	80091a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800919e:	f7f7 fb93 	bl	80008c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091a8:	7bfa      	ldrb	r2, [r7, #15]
 80091aa:	4611      	mov	r1, r2
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd fbac 	bl	800690a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fd fb54 	bl	8006866 <USBD_LL_Reset>
}
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fd fba7 	bl	800692a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6812      	ldr	r2, [r2, #0]
 80091ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091fc:	4b04      	ldr	r3, [pc, #16]	; (8009210 <HAL_PCD_SuspendCallback+0x48>)
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	4a03      	ldr	r2, [pc, #12]	; (8009210 <HAL_PCD_SuspendCallback+0x48>)
 8009202:	f043 0306 	orr.w	r3, r3, #6
 8009206:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	e000ed00 	.word	0xe000ed00

08009214 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009222:	4618      	mov	r0, r3
 8009224:	f7fd fb97 	bl	8006956 <USBD_LL_Resume>
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f7fd fbef 	bl	8006a2a <USBD_LL_IsoOUTIncomplete>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7fd fbab 	bl	80069c6 <USBD_LL_IsoINIncomplete>
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009286:	4618      	mov	r0, r3
 8009288:	f7fd fc01 	bl	8006a8e <USBD_LL_DevConnected>
}
 800928c:	bf00      	nop
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fd fbfe 	bl	8006aa4 <USBD_LL_DevDisconnected>
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d13c      	bne.n	800933a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092c0:	4a20      	ldr	r2, [pc, #128]	; (8009344 <USBD_LL_Init+0x94>)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a1e      	ldr	r2, [pc, #120]	; (8009344 <USBD_LL_Init+0x94>)
 80092cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092d0:	4b1c      	ldr	r3, [pc, #112]	; (8009344 <USBD_LL_Init+0x94>)
 80092d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092d8:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <USBD_LL_Init+0x94>)
 80092da:	2204      	movs	r2, #4
 80092dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092de:	4b19      	ldr	r3, [pc, #100]	; (8009344 <USBD_LL_Init+0x94>)
 80092e0:	2202      	movs	r2, #2
 80092e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092e4:	4b17      	ldr	r3, [pc, #92]	; (8009344 <USBD_LL_Init+0x94>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092ea:	4b16      	ldr	r3, [pc, #88]	; (8009344 <USBD_LL_Init+0x94>)
 80092ec:	2202      	movs	r2, #2
 80092ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092f0:	4b14      	ldr	r3, [pc, #80]	; (8009344 <USBD_LL_Init+0x94>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <USBD_LL_Init+0x94>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80092fc:	4b11      	ldr	r3, [pc, #68]	; (8009344 <USBD_LL_Init+0x94>)
 80092fe:	2200      	movs	r2, #0
 8009300:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009302:	4b10      	ldr	r3, [pc, #64]	; (8009344 <USBD_LL_Init+0x94>)
 8009304:	2200      	movs	r2, #0
 8009306:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009308:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <USBD_LL_Init+0x94>)
 800930a:	2200      	movs	r2, #0
 800930c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800930e:	480d      	ldr	r0, [pc, #52]	; (8009344 <USBD_LL_Init+0x94>)
 8009310:	f7f8 f9fe 	bl	8001710 <HAL_PCD_Init>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800931a:	f7f7 fad5 	bl	80008c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800931e:	2180      	movs	r1, #128	; 0x80
 8009320:	4808      	ldr	r0, [pc, #32]	; (8009344 <USBD_LL_Init+0x94>)
 8009322:	f7f9 fc3e 	bl	8002ba2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009326:	2240      	movs	r2, #64	; 0x40
 8009328:	2100      	movs	r1, #0
 800932a:	4806      	ldr	r0, [pc, #24]	; (8009344 <USBD_LL_Init+0x94>)
 800932c:	f7f9 fbf2 	bl	8002b14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009330:	2280      	movs	r2, #128	; 0x80
 8009332:	2101      	movs	r1, #1
 8009334:	4803      	ldr	r0, [pc, #12]	; (8009344 <USBD_LL_Init+0x94>)
 8009336:	f7f9 fbed 	bl	8002b14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200047e4 	.word	0x200047e4

08009348 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800935e:	4618      	mov	r0, r3
 8009360:	f7f8 faf3 	bl	800194a <HAL_PCD_Start>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 f930 	bl	80095d0 <USBD_Get_USB_Status>
 8009370:	4603      	mov	r3, r0
 8009372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009374:	7bbb      	ldrb	r3, [r7, #14]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	4608      	mov	r0, r1
 8009388:	4611      	mov	r1, r2
 800938a:	461a      	mov	r2, r3
 800938c:	4603      	mov	r3, r0
 800938e:	70fb      	strb	r3, [r7, #3]
 8009390:	460b      	mov	r3, r1
 8009392:	70bb      	strb	r3, [r7, #2]
 8009394:	4613      	mov	r3, r2
 8009396:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093a6:	78bb      	ldrb	r3, [r7, #2]
 80093a8:	883a      	ldrh	r2, [r7, #0]
 80093aa:	78f9      	ldrb	r1, [r7, #3]
 80093ac:	f7f8 ffc4 	bl	8002338 <HAL_PCD_EP_Open>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f90a 	bl	80095d0 <USBD_Get_USB_Status>
 80093bc:	4603      	mov	r3, r0
 80093be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093e4:	78fa      	ldrb	r2, [r7, #3]
 80093e6:	4611      	mov	r1, r2
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7f9 f80d 	bl	8002408 <HAL_PCD_EP_Close>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f8eb 	bl	80095d0 <USBD_Get_USB_Status>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7f9 f8cd 	bl	80025c6 <HAL_PCD_EP_SetStall>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 f8cc 	bl	80095d0 <USBD_Get_USB_Status>
 8009438:	4603      	mov	r3, r0
 800943a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943c:	7bbb      	ldrb	r3, [r7, #14]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009460:	78fa      	ldrb	r2, [r7, #3]
 8009462:	4611      	mov	r1, r2
 8009464:	4618      	mov	r0, r3
 8009466:	f7f9 f912 	bl	800268e <HAL_PCD_EP_ClrStall>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	4618      	mov	r0, r3
 8009472:	f000 f8ad 	bl	80095d0 <USBD_Get_USB_Status>
 8009476:	4603      	mov	r3, r0
 8009478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800947a:	7bbb      	ldrb	r3, [r7, #14]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009496:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800949c:	2b00      	cmp	r3, #0
 800949e:	da0b      	bge.n	80094b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	4613      	mov	r3, r2
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	4413      	add	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	440b      	add	r3, r1
 80094b2:	333e      	adds	r3, #62	; 0x3e
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	e00b      	b.n	80094d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	4613      	mov	r3, r2
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80094ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f8 fef7 	bl	80022ee <HAL_PCD_SetAddress>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f862 	bl	80095d0 <USBD_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b086      	sub	sp, #24
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	603b      	str	r3, [r7, #0]
 8009526:	460b      	mov	r3, r1
 8009528:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009538:	7af9      	ldrb	r1, [r7, #11]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	f7f8 fff8 	bl	8002532 <HAL_PCD_EP_Transmit>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f841 	bl	80095d0 <USBD_Get_USB_Status>
 800954e:	4603      	mov	r3, r0
 8009550:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009552:	7dbb      	ldrb	r3, [r7, #22]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	460b      	mov	r3, r1
 800956a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800957a:	7af9      	ldrb	r1, [r7, #11]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	f7f8 ff8c 	bl	800249c <HAL_PCD_EP_Receive>
 8009584:	4603      	mov	r3, r0
 8009586:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f820 	bl	80095d0 <USBD_Get_USB_Status>
 8009590:	4603      	mov	r3, r0
 8009592:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009594:	7dbb      	ldrb	r3, [r7, #22]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095a8:	4b03      	ldr	r3, [pc, #12]	; (80095b8 <USBD_static_malloc+0x18>)
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20004cf0 	.word	0x20004cf0

080095bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]

}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d817      	bhi.n	8009614 <USBD_Get_USB_Status+0x44>
 80095e4:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <USBD_Get_USB_Status+0x1c>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	080095fd 	.word	0x080095fd
 80095f0:	08009603 	.word	0x08009603
 80095f4:	08009609 	.word	0x08009609
 80095f8:	0800960f 	.word	0x0800960f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009600:	e00b      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009602:	2303      	movs	r3, #3
 8009604:	73fb      	strb	r3, [r7, #15]
    break;
 8009606:	e008      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009608:	2301      	movs	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
    break;
 800960c:	e005      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800960e:	2303      	movs	r3, #3
 8009610:	73fb      	strb	r3, [r7, #15]
    break;
 8009612:	e002      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009614:	2303      	movs	r3, #3
 8009616:	73fb      	strb	r3, [r7, #15]
    break;
 8009618:	bf00      	nop
  }
  return usb_status;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <__libc_init_array>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4d0d      	ldr	r5, [pc, #52]	; (8009660 <__libc_init_array+0x38>)
 800962c:	4c0d      	ldr	r4, [pc, #52]	; (8009664 <__libc_init_array+0x3c>)
 800962e:	1b64      	subs	r4, r4, r5
 8009630:	10a4      	asrs	r4, r4, #2
 8009632:	2600      	movs	r6, #0
 8009634:	42a6      	cmp	r6, r4
 8009636:	d109      	bne.n	800964c <__libc_init_array+0x24>
 8009638:	4d0b      	ldr	r5, [pc, #44]	; (8009668 <__libc_init_array+0x40>)
 800963a:	4c0c      	ldr	r4, [pc, #48]	; (800966c <__libc_init_array+0x44>)
 800963c:	f000 f820 	bl	8009680 <_init>
 8009640:	1b64      	subs	r4, r4, r5
 8009642:	10a4      	asrs	r4, r4, #2
 8009644:	2600      	movs	r6, #0
 8009646:	42a6      	cmp	r6, r4
 8009648:	d105      	bne.n	8009656 <__libc_init_array+0x2e>
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009650:	4798      	blx	r3
 8009652:	3601      	adds	r6, #1
 8009654:	e7ee      	b.n	8009634 <__libc_init_array+0xc>
 8009656:	f855 3b04 	ldr.w	r3, [r5], #4
 800965a:	4798      	blx	r3
 800965c:	3601      	adds	r6, #1
 800965e:	e7f2      	b.n	8009646 <__libc_init_array+0x1e>
 8009660:	08009730 	.word	0x08009730
 8009664:	08009730 	.word	0x08009730
 8009668:	08009730 	.word	0x08009730
 800966c:	08009734 	.word	0x08009734

08009670 <memset>:
 8009670:	4402      	add	r2, r0
 8009672:	4603      	mov	r3, r0
 8009674:	4293      	cmp	r3, r2
 8009676:	d100      	bne.n	800967a <memset+0xa>
 8009678:	4770      	bx	lr
 800967a:	f803 1b01 	strb.w	r1, [r3], #1
 800967e:	e7f9      	b.n	8009674 <memset+0x4>

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
